// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   kjr115@EEWS104A-013
//  Generated date: Fri Apr 29 16:34:03 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Render_core
// ------------------------------------------------------------------


module Render_core (
  clk, rst, v_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  output [11:0] v_out_rsc_mgc_out_stdreg_d;
  reg [11:0] v_out_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [3:0] red_sva;
    reg [18:0] for_i_1_sva;
    reg [4:0] for_if_acc_5_psp_1_sva;
    reg [2:0] for_if_acc_3_psp_sva;
    reg [2:0] for_if_acc_7_psp_sva;
    reg [9:0] for_if_acc_4_psp_sva;
    reg [3:0] red_sva_dfm;
    reg [18:0] for_i_1_sva_1;
    reg for_slc_itm;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        red_sva = 4'b0;
        for_i_1_sva = 19'b0;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        begin : for_0Exit
          forever begin : for_0
            // C-Step 0 of Loop 'for_0'
            begin : waitLoop1Exit
              forever begin : waitLoop1
                @(posedge clk);
                if ( rst )
                  disable mainExit;
                if ( clk )
                  disable waitLoop1Exit;
              end
            end
            // C-Step 1 of Loop 'for_0'
            for_if_acc_5_psp_1_sva = (conv_u2u_4_5(conv_u2u_3_4(conv_u2u_2_3(for_i_1_sva[12:11])
                + conv_u2u_2_3(~ (for_i_1_sva[14:13]))) + conv_u2u_3_4(conv_u2u_2_3(for_i_1_sva[16:15])
                + conv_u2u_2_3(~ (for_i_1_sva[18:17])))) + conv_u2u_3_5(conv_u2u_2_3(for_i_1_sva[8:7])
                + conv_u2u_2_3(~ (for_i_1_sva[10:9])))) + 5'b10111;
            for_if_acc_3_psp_sva = (readslicef_4_3_1((conv_u2u_3_4({(~ (for_if_acc_5_psp_1_sva[3:2]))
                , 1'b1}) + conv_s2u_2_4({(for_if_acc_5_psp_1_sva[4]) , 1'b1}))))
                + ({1'b1 , (for_if_acc_5_psp_1_sva[1:0])});
            for_if_acc_7_psp_sva = conv_u2u_1_3(for_if_acc_3_psp_sva[2]) + conv_u2u_2_3(for_if_acc_3_psp_sva[1:0]);
            for_if_acc_4_psp_sva = conv_u2u_9_10({for_if_acc_7_psp_sva , (for_i_1_sva[6:1])})
                + ({for_if_acc_7_psp_sva , (for_i_1_sva[6:0])});
            if ( ~((for_if_acc_4_psp_sva[9]) | (for_if_acc_4_psp_sva[8]) | (for_if_acc_4_psp_sva[7])
                | (for_if_acc_4_psp_sva[6]) | (for_if_acc_4_psp_sva[5]) | (for_if_acc_4_psp_sva[4])
                | (for_if_acc_4_psp_sva[3]) | (for_if_acc_4_psp_sva[2]) | (for_if_acc_4_psp_sva[1])
                | (for_if_acc_4_psp_sva[0]) | (for_i_1_sva[0])) ) begin
              red_sva_dfm = red_sva + 4'b11;
            end
            else begin
              red_sva_dfm = red_sva;
            end
            v_out_rsc_mgc_out_stdreg_d <= {8'b0, red_sva_dfm};
            for_i_1_sva_1 = for_i_1_sva + 19'b1;
            for_slc_itm = readslicef_8_1_7((conv_u2s_7_8(for_i_1_sva_1[18:12]) +
                8'b10110101));
            begin : waitLoop2Exit
              forever begin : waitLoop2
                @(posedge clk);
                if ( rst )
                  disable mainExit;
                if ( clk )
                  disable waitLoop2Exit;
              end
            end
            // C-Step 2 of Loop 'for_0'
            if ( ~ for_slc_itm )
              disable for_0Exit;
            red_sva = red_sva_dfm;
            for_i_1_sva = for_i_1_sva_1;
          end
        end
      end
    end
    for_slc_itm = 1'b0;
    for_i_1_sva_1 = 19'b0;
    red_sva_dfm = 4'b0;
    for_if_acc_4_psp_sva = 10'b0;
    for_if_acc_7_psp_sva = 3'b0;
    for_if_acc_3_psp_sva = 3'b0;
    for_if_acc_5_psp_1_sva = 5'b0;
    for_i_1_sva = 19'b0;
    red_sva = 4'b0;
    v_out_rsc_mgc_out_stdreg_d <= 12'b0;
  end


  function [2:0] readslicef_4_3_1;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_4_3_1 = tmp[2:0];
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_3_5 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_5 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [3:0] conv_s2u_2_4 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function  [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Render
//  Generated from file(s):
//    2) $PROJECT_HOME/src/Render.cpp
// ------------------------------------------------------------------


module Render (
  v_out_rsc_z, clk, rst
);
  output [11:0] v_out_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [11:0] v_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(12)) v_out_rsc_mgc_out_stdreg (
      .d(v_out_rsc_mgc_out_stdreg_d),
      .z(v_out_rsc_z)
    );
  Render_core Render_core_inst (
      .clk(clk),
      .rst(rst),
      .v_out_rsc_mgc_out_stdreg_d(v_out_rsc_mgc_out_stdreg_d)
    );
endmodule



