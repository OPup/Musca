// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   kjr115@EEWS104A-009
//  Generated date: Tue May 03 14:47:06 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Render_core
// ------------------------------------------------------------------


module Render_core (
  clk, rst, v_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  output [11:0] v_out_rsc_mgc_out_stdreg_d;
  reg [11:0] v_out_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [20:0] for_i_2_lpi;
    reg exit_main_2_for_lpi;
    reg exit_main_1_for_lpi;
    reg [20:0] for_i_1_lpi;
    reg [20:0] for_i_2_lpi_dfm;
    reg exit_main_1_for_lpi_dfm;
    reg [20:0] for_i_1_sva;
    reg exit_main_2_for_sva_1;
    reg [20:0] for_i_2_sva_1;
    reg exit_main_1_for_sva_1;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        exit_main_1_for_sva_1 = 1'b0;
        exit_main_2_for_sva_1 = 1'b0;
        for_i_2_lpi_dfm = for_i_2_lpi & (signext_21_1(~ exit_main_2_for_lpi));
        exit_main_1_for_lpi_dfm = exit_main_1_for_lpi & (~ exit_main_2_for_lpi);
        if ( exit_main_1_for_lpi_dfm ) begin
          v_out_rsc_mgc_out_stdreg_d <= signext_12_1(readslicef_4_1_3(((for_i_1_lpi[20:17])
              + 4'b1011)));
          for_i_1_sva = for_i_1_lpi + 21'b1;
          exit_main_2_for_sva_1 = ~ (readslicef_4_1_3((conv_u2s_3_4(for_i_1_sva[20:18])
              + 4'b1011)));
          for_i_1_lpi = for_i_1_sva;
          for_i_2_lpi = for_i_2_lpi_dfm;
        end
        else begin
          v_out_rsc_mgc_out_stdreg_d <= signext_12_1(readslicef_4_1_3(((for_i_2_lpi_dfm[20:17])
              + 4'b1011)));
          for_i_2_sva_1 = for_i_2_lpi_dfm + 21'b1;
          exit_main_1_for_sva_1 = ~ (readslicef_4_1_3((conv_u2s_3_4(for_i_2_sva_1[20:18])
              + 4'b1011)));
          for_i_1_lpi = for_i_1_lpi & (signext_21_1(~ exit_main_1_for_sva_1));
          for_i_2_lpi = for_i_2_sva_1;
        end
        exit_main_2_for_lpi = exit_main_2_for_sva_1 & exit_main_1_for_lpi_dfm;
        exit_main_1_for_lpi = MUX_s_1_2_2({exit_main_1_for_sva_1 , exit_main_1_for_lpi_dfm},
            exit_main_1_for_lpi_dfm);
      end
    end
    exit_main_1_for_sva_1 = 1'b0;
    for_i_2_sva_1 = 21'b0;
    exit_main_2_for_sva_1 = 1'b0;
    for_i_1_sva = 21'b0;
    exit_main_1_for_lpi_dfm = 1'b0;
    for_i_2_lpi_dfm = 21'b0;
    for_i_1_lpi = 21'b0;
    exit_main_1_for_lpi = 1'b0;
    exit_main_2_for_lpi = 1'b0;
    for_i_2_lpi = 21'b0;
    v_out_rsc_mgc_out_stdreg_d <= 12'b0;
    for_i_2_lpi = 21'b0;
    exit_main_2_for_lpi = 1'b1;
    exit_main_1_for_lpi = 1'b0;
    for_i_1_lpi = 21'b0;
  end


  function [20:0] signext_21_1;
    input [0:0] vector;
  begin
    signext_21_1= {{20{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_4_1_3;
    input [3:0] vector;
    reg [3:0] tmp;
  begin
    tmp = vector >> 3;
    readslicef_4_1_3 = tmp[0:0];
  end
  endfunction


  function [11:0] signext_12_1;
    input [0:0] vector;
  begin
    signext_12_1= {{11{vector[0]}}, vector};
  end
  endfunction


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function signed [3:0] conv_u2s_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2s_3_4 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Render
//  Generated from file(s):
//    2) $PROJECT_HOME/src/Render.cpp
// ------------------------------------------------------------------


module Render (
  v_out_rsc_z, clk, rst
);
  output [11:0] v_out_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [11:0] v_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(12)) v_out_rsc_mgc_out_stdreg (
      .d(v_out_rsc_mgc_out_stdreg_d),
      .z(v_out_rsc_z)
    );
  Render_core Render_core_inst (
      .clk(clk),
      .rst(rst),
      .v_out_rsc_mgc_out_stdreg_d(v_out_rsc_mgc_out_stdreg_d)
    );
endmodule



