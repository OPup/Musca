// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   kjr115@EEWS104A-013
//  Generated date: Fri Apr 29 16:50:10 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Render_core_fsm
//  FSM Module
// ------------------------------------------------------------------


module Render_core_fsm (
  clk, rst, fsm_output, st_for_1_tr0
);
  input clk;
  input rst;
  output [2:0] fsm_output;
  reg [2:0] fsm_output;
  input st_for_1_tr0;


  // FSM State Type Declaration for Render_core_fsm_1
  parameter
    st_main = 2'd0,
    st_for = 2'd1,
    st_for_1 = 2'd2,
    state_x = 2'b00;

  reg [1:0] state_var;
  reg [1:0] state_var_NS;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : Render_core_fsm_1
    case (state_var)
      st_main : begin
        fsm_output = 3'b1;
        state_var_NS = st_for;
      end
      st_for : begin
        fsm_output = 3'b10;
        state_var_NS = st_for_1;
      end
      st_for_1 : begin
        fsm_output = 3'b100;
        if ( st_for_1_tr0 ) begin
          state_var_NS = st_main;
        end
        else begin
          state_var_NS = st_for;
        end
      end
      default : begin
        fsm_output = 3'b000;
        state_var_NS = st_main;
      end
    endcase
  end

  always @(posedge clk) begin
    if ( rst ) begin
      state_var <= st_main;
    end
    else begin
      state_var <= state_var_NS;
    end
  end

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Render_core
// ------------------------------------------------------------------


module Render_core (
  clk, rst, v_out_rsc_mgc_out_stdreg_d
);
  input clk;
  input rst;
  output [11:0] v_out_rsc_mgc_out_stdreg_d;
  reg [11:0] v_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  wire [2:0] fsm_output;
  reg [3:0] red_sva;
  reg [18:0] for_i_1_sva;
  reg [3:0] red_sva_dfm;
  reg [18:0] for_i_1_sva_1;
  reg for_slc_itm;
  wire [4:0] for_if_acc_1_psp_sva;
  wire [5:0] nl_for_if_acc_1_psp_sva;
  wire [3:0] red_sva_dfm_mx0;
  wire [18:0] for_i_1_sva_2;
  wire [19:0] nl_for_i_1_sva_2;
  wire [4:0] for_if_acc_5_psp_1_sva;
  wire [5:0] nl_for_if_acc_5_psp_1_sva;
  wire [6:0] for_if_acc_3_psp_1_sva;
  wire [8:0] nl_for_if_acc_3_psp_1_sva;
  wire [3:0] for_if_acc_14_sdt;
  wire [4:0] nl_for_if_acc_14_sdt;


  // Interconnect Declarations for Component Instantiations 
  wire [0:0] nl_Render_core_fsm_inst_st_for_1_tr0;
  assign nl_Render_core_fsm_inst_st_for_1_tr0 = ~ for_slc_itm;
  Render_core_fsm Render_core_fsm_inst (
      .clk(clk),
      .rst(rst),
      .fsm_output(fsm_output),
      .st_for_1_tr0(nl_Render_core_fsm_inst_st_for_1_tr0)
    );
  assign red_sva_dfm_mx0 = MUX_v_4_2_2({(red_sva + 4'b11) , red_sva}, (for_if_acc_1_psp_sva[4])
      | (for_if_acc_1_psp_sva[3]) | (for_if_acc_1_psp_sva[2]) | (for_if_acc_1_psp_sva[1])
      | (for_if_acc_1_psp_sva[0]) | (for_i_1_sva[6]) | (for_i_1_sva[5]) | (for_i_1_sva[4])
      | (for_i_1_sva[3]) | (for_i_1_sva[2]) | (for_i_1_sva[1]) | (for_i_1_sva[0]));
  assign nl_for_i_1_sva_2 = for_i_1_sva + 19'b1;
  assign for_i_1_sva_2 = nl_for_i_1_sva_2[18:0];
  assign nl_for_if_acc_1_psp_sva = conv_s2u_4_5({(for_if_acc_5_psp_1_sva[4]) , 2'b0
      , (for_if_acc_5_psp_1_sva[4])}) + for_if_acc_5_psp_1_sva;
  assign for_if_acc_1_psp_sva = nl_for_if_acc_1_psp_sva[4:0];
  assign nl_for_if_acc_5_psp_1_sva = ({(({(for_if_acc_3_psp_1_sva[6:5]) , 2'b1})
      + conv_u2u_3_4(for_if_acc_14_sdt[3:1])) , (for_if_acc_14_sdt[0])}) + ({1'b1
      , (for_if_acc_3_psp_1_sva[3:0])});
  assign for_if_acc_5_psp_1_sva = nl_for_if_acc_5_psp_1_sva[4:0];
  assign nl_for_if_acc_3_psp_1_sva = (conv_s2u_6_7(({(conv_s2u_1_2(for_i_1_sva[13])
      + conv_s2u_1_2(for_i_1_sva[16])) , (conv_u2u_3_4({(for_i_1_sva[13]) , 1'b0
      , (for_i_1_sva[13])}) + conv_u2u_2_4(signext_2_1(for_i_1_sva[16])))}) + conv_u2s_5_6(conv_u2u_4_5({(conv_u2u_2_3(for_i_1_sva[15:14])
      + conv_u2u_1_3(for_i_1_sva[15])) , (for_i_1_sva[14])}) + conv_u2u_4_5(for_i_1_sva[10:7])))
      + conv_u2u_6_7({1'b1 , (({1'b1 , (~ (for_i_1_sva[11])) , (({1'b1 , (~ (for_i_1_sva[18:17]))})
      + ({2'b11 , (~ (for_i_1_sva[11]))}))}) + ({(conv_u2u_1_2(for_i_1_sva[12]) +
      2'b1) , 2'b11 , (~ (for_i_1_sva[12]))}))})) + 7'b1010011;
  assign for_if_acc_3_psp_1_sva = nl_for_if_acc_3_psp_1_sva[6:0];
  assign nl_for_if_acc_14_sdt = ({(~ (for_if_acc_3_psp_1_sva[4])) , 2'b11 , (~ (for_if_acc_3_psp_1_sva[4]))})
      + conv_s2u_2_4(~ (for_if_acc_3_psp_1_sva[6:5]));
  assign for_if_acc_14_sdt = nl_for_if_acc_14_sdt[3:0];
  always @(posedge clk) begin
    if ( rst ) begin
      red_sva <= 4'b0;
      for_i_1_sva <= 19'b0;
      v_out_rsc_mgc_out_stdreg_d <= 12'b0;
      red_sva_dfm <= 4'b0;
      for_slc_itm <= 1'b0;
      for_i_1_sva_1 <= 19'b0;
    end
    else begin
      red_sva <= red_sva_dfm & (signext_4_1(fsm_output[2]));
      for_i_1_sva <= for_i_1_sva_1 & (signext_19_1(fsm_output[2]));
      v_out_rsc_mgc_out_stdreg_d <= MUX_v_12_2_2({v_out_rsc_mgc_out_stdreg_d , ({8'b0
          , red_sva_dfm_mx0})}, fsm_output[1]);
      red_sva_dfm <= red_sva_dfm_mx0;
      for_slc_itm <= readslicef_8_1_7((conv_u2s_7_8(for_i_1_sva_2[18:12]) + 8'b10110101));
      for_i_1_sva_1 <= for_i_1_sva_2;
    end
  end

  function [3:0] MUX_v_4_2_2;
    input [7:0] inputs;
    input [0:0] sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[7:4];
      end
      1'b1 : begin
        result = inputs[3:0];
      end
      default : begin
        result = inputs[7:4];
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function [1:0] signext_2_1;
    input [0:0] vector;
  begin
    signext_2_1= {{1{vector[0]}}, vector};
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [18:0] signext_19_1;
    input [0:0] vector;
  begin
    signext_19_1= {{18{vector[0]}}, vector};
  end
  endfunction


  function [11:0] MUX_v_12_2_2;
    input [23:0] inputs;
    input [0:0] sel;
    reg [11:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[23:12];
      end
      1'b1 : begin
        result = inputs[11:0];
      end
      default : begin
        result = inputs[23:12];
      end
    endcase
    MUX_v_12_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_8_1_7;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 7;
    readslicef_8_1_7 = tmp[0:0];
  end
  endfunction


  function  [4:0] conv_s2u_4_5 ;
    input signed [3:0]  vector ;
  begin
    conv_s2u_4_5 = {vector[3], vector};
  end
  endfunction


  function  [3:0] conv_u2u_3_4 ;
    input [2:0]  vector ;
  begin
    conv_u2u_3_4 = {1'b0, vector};
  end
  endfunction


  function  [6:0] conv_s2u_6_7 ;
    input signed [5:0]  vector ;
  begin
    conv_s2u_6_7 = {vector[5], vector};
  end
  endfunction


  function  [1:0] conv_s2u_1_2 ;
    input signed [0:0]  vector ;
  begin
    conv_s2u_1_2 = {vector[0], vector};
  end
  endfunction


  function  [3:0] conv_u2u_2_4 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_4 = {{2{1'b0}}, vector};
  end
  endfunction


  function signed [5:0] conv_u2s_5_6 ;
    input [4:0]  vector ;
  begin
    conv_u2s_5_6 = {1'b0, vector};
  end
  endfunction


  function  [4:0] conv_u2u_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2u_4_5 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_2_3 ;
    input [1:0]  vector ;
  begin
    conv_u2u_2_3 = {1'b0, vector};
  end
  endfunction


  function  [2:0] conv_u2u_1_3 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_3 = {{2{1'b0}}, vector};
  end
  endfunction


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction


  function  [3:0] conv_s2u_2_4 ;
    input signed [1:0]  vector ;
  begin
    conv_s2u_2_4 = {{2{vector[1]}}, vector};
  end
  endfunction


  function signed [7:0] conv_u2s_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2s_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Render
//  Generated from file(s):
//    2) $PROJECT_HOME/src/Render.cpp
// ------------------------------------------------------------------


module Render (
  v_out_rsc_z, clk, rst
);
  output [11:0] v_out_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [11:0] v_out_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(12)) v_out_rsc_mgc_out_stdreg (
      .d(v_out_rsc_mgc_out_stdreg_d),
      .z(v_out_rsc_z)
    );
  Render_core Render_core_inst (
      .clk(clk),
      .rst(rst),
      .v_out_rsc_mgc_out_stdreg_d(v_out_rsc_mgc_out_stdreg_d)
    );
endmodule



