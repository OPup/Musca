// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   cm2715@EEWS104A-004
//  Generated date: Thu May 05 15:22:37 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    Counter_core
// ------------------------------------------------------------------


module Counter_core (
  clk, en, asyn_rst, row_count_rsc_mgc_out_stdreg_d, col_count_rsc_mgc_out_stdreg_d
);
  input clk;
  input en;
  input asyn_rst;
  output [4:0] row_count_rsc_mgc_out_stdreg_d;
  reg [4:0] row_count_rsc_mgc_out_stdreg_d;
  output [4:0] col_count_rsc_mgc_out_stdreg_d;
  reg [4:0] col_count_rsc_mgc_out_stdreg_d;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [6:0] for_for_j_1_sva_1;
    reg [6:0] for_i_1_sva_1;
    reg [5:0] for_i_1_sva_2;
    reg [5:0] for_for_j_1_sva_2;

    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        for_i_1_sva_2 = 6'b0;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( asyn_rst ));
            if ( ~ asyn_rst )
              disable mainExit;
            if ( en )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        begin : for_0Exit
          forever begin : for_0
            // C-Step 0 of Loop 'for_0'
            for_for_j_1_sva_2 = 6'b0;
            begin : for_forExit
              forever begin : for_for
                // C-Step 0 of Loop 'for_for'
                col_count_rsc_mgc_out_stdreg_d <= for_for_j_1_sva_2[4:0];
                row_count_rsc_mgc_out_stdreg_d <= for_i_1_sva_2[4:0];
                begin : waitLoop1Exit
                  forever begin : waitLoop1
                    @(posedge clk or negedge ( asyn_rst ));
                    if ( ~ asyn_rst )
                      disable mainExit;
                    if ( en )
                      disable waitLoop1Exit;
                  end
                end
                // C-Step 1 of Loop 'for_for'
                for_for_j_1_sva_1 = conv_u2u_6_7(for_for_j_1_sva_2) + 7'b1;
                if ( for_for_j_1_sva_1[6] )
                  disable for_forExit;
                for_for_j_1_sva_2 = for_for_j_1_sva_1[5:0];
              end
            end
            begin : waitLoop2Exit
              forever begin : waitLoop2
                @(posedge clk or negedge ( asyn_rst ));
                if ( ~ asyn_rst )
                  disable mainExit;
                if ( en )
                  disable waitLoop2Exit;
              end
            end
            // C-Step 1 of Loop 'for_0'
            for_i_1_sva_1 = conv_u2u_6_7(for_i_1_sva_2) + 7'b1;
            if ( for_i_1_sva_1[6] )
              disable for_0Exit;
            for_i_1_sva_2 = for_i_1_sva_1[5:0];
          end
        end
      end
    end
    for_for_j_1_sva_2 = 6'b0;
    for_i_1_sva_2 = 6'b0;
    for_i_1_sva_1 = 7'b0;
    for_for_j_1_sva_1 = 7'b0;
    col_count_rsc_mgc_out_stdreg_d <= 5'b0;
    row_count_rsc_mgc_out_stdreg_d <= 5'b0;
  end


  function  [6:0] conv_u2u_6_7 ;
    input [5:0]  vector ;
  begin
    conv_u2u_6_7 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    Counter
//  Generated from file(s):
//    5) $PROJECT_HOME/../../src/AccessCount.cpp
// ------------------------------------------------------------------


module Counter (
  row_count_rsc_z, col_count_rsc_z, clk, en, asyn_rst
);
  output [4:0] row_count_rsc_z;
  output [4:0] col_count_rsc_z;
  input clk;
  input en;
  input asyn_rst;


  // Interconnect Declarations
  wire [4:0] row_count_rsc_mgc_out_stdreg_d;
  wire [4:0] col_count_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_out_stdreg #(.rscid(1),
  .width(5)) row_count_rsc_mgc_out_stdreg (
      .d(row_count_rsc_mgc_out_stdreg_d),
      .z(row_count_rsc_z)
    );
  mgc_out_stdreg #(.rscid(2),
  .width(5)) col_count_rsc_mgc_out_stdreg (
      .d(col_count_rsc_mgc_out_stdreg_d),
      .z(col_count_rsc_z)
    );
  Counter_core Counter_core_inst (
      .clk(clk),
      .en(en),
      .asyn_rst(asyn_rst),
      .row_count_rsc_mgc_out_stdreg_d(row_count_rsc_mgc_out_stdreg_d),
      .col_count_rsc_mgc_out_stdreg_d(col_count_rsc_mgc_out_stdreg_d)
    );
endmodule



