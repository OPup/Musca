-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   kjr115@EEWS104A-006
--  Generated date: Fri May 06 17:29:54 2016
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    Counter_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.Counter_mux_pkg.ALL;


ENTITY Counter_core IS
  PORT(
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    asyn_rst : IN STD_LOGIC;
    row_count_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    col_count_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (4 DOWNTO 0)
  );
END Counter_core;

ARCHITECTURE v4 OF Counter_core IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  core : PROCESS
    -- Interconnect Declarations
    VARIABLE for_for_j_1_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE for_i_1_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE for_i_1_sva_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
    VARIABLE for_for_j_1_sva_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);

  BEGIN
    main : LOOP
      -- C-Step 0 of Loop 'main'
      for_i_1_sva_2 := STD_LOGIC_VECTOR'("000000");
      WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( asyn_rst
          = '0' );
      EXIT main WHEN ( asyn_rst = '0' );
      -- C-Step 1 of Loop 'main'
      for_0 : LOOP
        -- C-Step 0 of Loop 'for_0'
        for_for_j_1_sva_2 := STD_LOGIC_VECTOR'("000000");
        for_for : LOOP
          -- C-Step 0 of Loop 'for_for'
          col_count_rsc_mgc_out_stdreg_d <= for_for_j_1_sva_2(4 DOWNTO 0);
          row_count_rsc_mgc_out_stdreg_d <= for_i_1_sva_2(4 DOWNTO 0);
          WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( asyn_rst
              = '0' );
          EXIT main WHEN ( asyn_rst = '0' );
          -- C-Step 1 of Loop 'for_for'
          for_for_j_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_for_j_1_sva_2),
              7) + CONV_UNSIGNED(CONV_UNSIGNED('1', 1), 7), 7));
          EXIT for_for WHEN ( (for_for_j_1_sva_1(6)) = '1' );
          for_for_j_1_sva_2 := for_for_j_1_sva_1(5 DOWNTO 0);
        END LOOP for_for;

        WAIT UNTIL (clk'EVENT AND ( clk = '1' ) AND ( ( en = '1' ) ) ) OR ( asyn_rst
            = '0' );
        EXIT main WHEN ( asyn_rst = '0' );
        -- C-Step 1 of Loop 'for_0'
        for_i_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(for_i_1_sva_2),
            7) + CONV_UNSIGNED(CONV_UNSIGNED('1', 1), 7), 7));
        EXIT for_0 WHEN ( (for_i_1_sva_1(6)) = '1' );
        for_i_1_sva_2 := for_i_1_sva_1(5 DOWNTO 0);
      END LOOP for_0;

    END LOOP main;

    for_for_j_1_sva_2 := STD_LOGIC_VECTOR'("000000");
    for_i_1_sva_2 := STD_LOGIC_VECTOR'("000000");
    for_i_1_sva_1 := STD_LOGIC_VECTOR'("0000000");
    for_for_j_1_sva_1 := STD_LOGIC_VECTOR'("0000000");
    col_count_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("00000");
    row_count_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("00000");
  END PROCESS core;

END v4;

-- ------------------------------------------------------------------
--  Design Unit:    Counter
--  Generated from file(s):
--    5) $PROJECT_HOME/../../src/AccessCount.cpp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.Counter_mux_pkg.ALL;


ENTITY Counter IS
  PORT(
    row_count_rsc_z : OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    col_count_rsc_z : OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
    clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    asyn_rst : IN STD_LOGIC
  );
END Counter;

ARCHITECTURE v4 OF Counter IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL row_count_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL col_count_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (4 DOWNTO 0);

  SIGNAL row_count_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL row_count_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (4 DOWNTO 0);

  SIGNAL col_count_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL col_count_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (4 DOWNTO 0);

  COMPONENT Counter_core
    PORT(
      clk : IN STD_LOGIC;
      en : IN STD_LOGIC;
      asyn_rst : IN STD_LOGIC;
      row_count_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (4 DOWNTO 0);
      col_count_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (4 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL Counter_core_inst_row_count_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (4 DOWNTO
      0);
  SIGNAL Counter_core_inst_col_count_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (4 DOWNTO
      0);

BEGIN
  -- Default Constant Signal Assignments

  row_count_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 1,
      width => 5
      )
    PORT MAP(
      d => row_count_rsc_mgc_out_stdreg_d_1,
      z => row_count_rsc_mgc_out_stdreg_z
    );
  row_count_rsc_mgc_out_stdreg_d_1 <= row_count_rsc_mgc_out_stdreg_d;
  row_count_rsc_z <= row_count_rsc_mgc_out_stdreg_z;

  col_count_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 2,
      width => 5
      )
    PORT MAP(
      d => col_count_rsc_mgc_out_stdreg_d_1,
      z => col_count_rsc_mgc_out_stdreg_z
    );
  col_count_rsc_mgc_out_stdreg_d_1 <= col_count_rsc_mgc_out_stdreg_d;
  col_count_rsc_z <= col_count_rsc_mgc_out_stdreg_z;

  Counter_core_inst : Counter_core
    PORT MAP(
      clk => clk,
      en => en,
      asyn_rst => asyn_rst,
      row_count_rsc_mgc_out_stdreg_d => Counter_core_inst_row_count_rsc_mgc_out_stdreg_d,
      col_count_rsc_mgc_out_stdreg_d => Counter_core_inst_col_count_rsc_mgc_out_stdreg_d
    );
  row_count_rsc_mgc_out_stdreg_d <= Counter_core_inst_row_count_rsc_mgc_out_stdreg_d;
  col_count_rsc_mgc_out_stdreg_d <= Counter_core_inst_col_count_rsc_mgc_out_stdreg_d;

END v4;



