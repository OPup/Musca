-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   kjr115@EEWS104A-021
--  Generated date: Wed May 04 14:36:44 2016
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    MazeMemory_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;
USE work.MazeMemory_mux_pkg.ALL;


ENTITY MazeMemory_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    row_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
    col_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
    val_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    write_rsc_mgc_in_wire_d : IN STD_LOGIC;
    out_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    maze_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    maze_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
    maze_rsc_singleport_re : OUT STD_LOGIC;
    maze_rsc_singleport_we : OUT STD_LOGIC;
    maze_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (3 DOWNTO 0)
  );
END MazeMemory_core;

ARCHITECTURE v2 OF MazeMemory_core IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL maze_rsc_singleport_data_in_reg : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL maze_rsc_singleport_re_reg : STD_LOGIC;
  SIGNAL maze_rsc_singleport_we_reg : STD_LOGIC;
  SIGNAL maze_rsc_singleport_addr_reg_sg2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL maze_rsc_singleport_addr_reg_sg1 : STD_LOGIC;
  SIGNAL maze_rsc_singleport_addr_reg_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);

BEGIN
  -- Default Constant Signal Assignments

  core : PROCESS
    -- Interconnect Declarations
    VARIABLE maze_vinit_ndx_1_sva : STD_LOGIC_VECTOR (11 DOWNTO 0);
    VARIABLE val_1_sva : STD_LOGIC_VECTOR (3 DOWNTO 0);
    VARIABLE if_nor_itm : STD_LOGIC;
    VARIABLE if_acc_itm : STD_LOGIC_VECTOR (11 DOWNTO 0);
    VARIABLE io_read_write_rsc_d_svs_st : STD_LOGIC;
    VARIABLE maze_rsc_singleport_data_in_reg_var : STD_LOGIC_VECTOR (3 DOWNTO 0);
    VARIABLE maze_rsc_singleport_re_reg_var : STD_LOGIC;
    VARIABLE maze_rsc_singleport_we_reg_var : STD_LOGIC;
    VARIABLE last_clk : STD_LOGIC;
    VARIABLE maze_rsc_singleport_addr_reg_var_sg2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
    VARIABLE maze_rsc_singleport_addr_reg_var_sg1 : STD_LOGIC;
    VARIABLE maze_rsc_singleport_addr_reg_var_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);

  BEGIN
    core_rlp : LOOP
      -- C-Step 0 of Loop 'core_rlp'
      maze_vinit_ndx_1_sva := STD_LOGIC_VECTOR'("111111111111");
      maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
      maze_rsc_singleport_addr_reg_sg1 <= '0';
      maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
      maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
      maze_rsc_singleport_re_reg <= '1';
      maze_rsc_singleport_we_reg <= '1';
      WAIT UNTIL clk'EVENT AND ( clk = '1' );
      EXIT core_rlp WHEN ( rst = '1' );
      -- C-Step 1 of Loop 'core_rlp'
      maze_vinit : LOOP
        -- C-Step 0 of Loop 'maze_vinit'
        maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
        maze_rsc_singleport_addr_reg_sg1 <= '0';
        maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
        maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
        maze_rsc_singleport_re_reg <= '1';
        maze_rsc_singleport_we_reg <= '1';
        maze_rsc_singleport_we_reg <= '0';
        maze_rsc_singleport_addr_reg_sg1 <= maze_vinit_ndx_1_sva(5);
        maze_rsc_singleport_addr_reg_1 <= maze_vinit_ndx_1_sva(4 DOWNTO 0);
        maze_rsc_singleport_addr_reg_sg2 <= maze_vinit_ndx_1_sva(11 DOWNTO 6);
        maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
        WAIT UNTIL clk'EVENT AND ( clk = '1' );
        EXIT core_rlp WHEN ( rst = '1' );
        -- C-Step 1 of Loop 'maze_vinit'
        if_nor_itm := NOT((maze_vinit_ndx_1_sva(11)) OR (maze_vinit_ndx_1_sva(10))
            OR (maze_vinit_ndx_1_sva(9)) OR (maze_vinit_ndx_1_sva(8)) OR (maze_vinit_ndx_1_sva(7))
            OR (maze_vinit_ndx_1_sva(6)) OR (maze_vinit_ndx_1_sva(5)) OR (maze_vinit_ndx_1_sva(4))
            OR (maze_vinit_ndx_1_sva(3)) OR (maze_vinit_ndx_1_sva(2)) OR (maze_vinit_ndx_1_sva(1))
            OR (maze_vinit_ndx_1_sva(0)));
        if_acc_itm := STD_LOGIC_VECTOR(CONV_UNSIGNED(UNSIGNED(maze_vinit_ndx_1_sva)
            + CONV_UNSIGNED(CONV_SIGNED('1', 1), 12), 12));
        maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
        maze_rsc_singleport_addr_reg_sg1 <= '0';
        maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
        maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
        maze_rsc_singleport_re_reg <= '1';
        maze_rsc_singleport_we_reg <= '1';
        WAIT UNTIL clk'EVENT AND ( clk = '1' );
        EXIT core_rlp WHEN ( rst = '1' );
        -- C-Step 2 of Loop 'maze_vinit'
        EXIT maze_vinit WHEN ( if_nor_itm = '1' );
        maze_vinit_ndx_1_sva := if_acc_itm;
      END LOOP maze_vinit;

      main : LOOP
        -- C-Step 0 of Loop 'main'
        maze_rsc_singleport_data_in_reg_var := maze_rsc_singleport_data_in_reg;
        maze_rsc_singleport_addr_reg_var_sg1 := maze_rsc_singleport_addr_reg_sg1;
        maze_rsc_singleport_addr_reg_var_1 := maze_rsc_singleport_addr_reg_1;
        maze_rsc_singleport_addr_reg_var_sg2 := maze_rsc_singleport_addr_reg_sg2;
        maze_rsc_singleport_re_reg_var := maze_rsc_singleport_re_reg;
        maze_rsc_singleport_we_reg_var := maze_rsc_singleport_we_reg;
        unreg_outs_lp_3 : LOOP
          -- C-Step 0 of Loop 'unreg_outs_lp_3'
          maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
          maze_rsc_singleport_addr_reg_sg1 <= '0';
          maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
          maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
          maze_rsc_singleport_re_reg <= '1';
          maze_rsc_singleport_we_reg <= '1';
          val_1_sva := val_rsc_mgc_in_wire_d;
          io_read_write_rsc_d_svs_st := write_rsc_mgc_in_wire_d;
          maze_rsc_singleport_addr_reg_sg1 <= '0';
          maze_rsc_singleport_addr_reg_1 <= col_rsc_mgc_in_wire_d;
          maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR(UNSIGNED'("0") & UNSIGNED(row_rsc_mgc_in_wire_d));
          IF ( io_read_write_rsc_d_svs_st = '1' ) THEN
            maze_rsc_singleport_we_reg <= '0';
            maze_rsc_singleport_data_in_reg <= val_1_sva;
          ELSE
            maze_rsc_singleport_re_reg <= '0';
          END IF;
          last_clk := clk;
          WAIT UNTIL clk'EVENT OR row_rsc_mgc_in_wire_d'EVENT OR col_rsc_mgc_in_wire_d'EVENT
              OR val_rsc_mgc_in_wire_d'EVENT OR write_rsc_mgc_in_wire_d'EVENT;
          EXIT unreg_outs_lp_3 WHEN ( ((NOT last_clk) AND clk) = '1' );
          maze_rsc_singleport_data_in_reg <= maze_rsc_singleport_data_in_reg_var;
          maze_rsc_singleport_addr_reg_sg1 <= maze_rsc_singleport_addr_reg_var_sg1;
          maze_rsc_singleport_addr_reg_1 <= maze_rsc_singleport_addr_reg_var_1;
          maze_rsc_singleport_addr_reg_sg2 <= maze_rsc_singleport_addr_reg_var_sg2;
          maze_rsc_singleport_re_reg <= maze_rsc_singleport_re_reg_var;
          maze_rsc_singleport_we_reg <= maze_rsc_singleport_we_reg_var;
        END LOOP unreg_outs_lp_3;

        EXIT core_rlp WHEN ( rst = '1' );
        maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
        maze_rsc_singleport_addr_reg_sg1 <= '0';
        maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
        maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
        maze_rsc_singleport_re_reg <= '1';
        maze_rsc_singleport_we_reg <= '1';
        WAIT UNTIL clk'EVENT AND ( clk = '1' );
        EXIT core_rlp WHEN ( rst = '1' );
        -- C-Step 1 of Loop 'main'
        IF ( io_read_write_rsc_d_svs_st = '1' ) THEN
          out_rsc_mgc_out_stdreg_d <= val_1_sva;
        ELSE
          out_rsc_mgc_out_stdreg_d <= maze_rsc_singleport_data_out;
        END IF;
        maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
        maze_rsc_singleport_addr_reg_sg1 <= '0';
        maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
        maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
        maze_rsc_singleport_re_reg <= '1';
        maze_rsc_singleport_we_reg <= '1';
        WAIT UNTIL clk'EVENT AND ( clk = '1' );
        EXIT core_rlp WHEN ( rst = '1' );
        -- C-Step 2 of Loop 'main'
      END LOOP main;

    END LOOP core_rlp;

    maze_rsc_singleport_we_reg <= '0';
    maze_rsc_singleport_re_reg <= '0';
    maze_rsc_singleport_addr_reg_sg1 <= '0';
    maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
    maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
    maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
    out_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("0000");
    maze_rsc_singleport_data_in_reg <= STD_LOGIC_VECTOR'("0000");
    maze_rsc_singleport_addr_reg_sg1 <= '0';
    maze_rsc_singleport_addr_reg_1 <= STD_LOGIC_VECTOR'("00000");
    maze_rsc_singleport_addr_reg_sg2 <= STD_LOGIC_VECTOR'("000000");
    maze_rsc_singleport_re_reg <= '1';
    maze_rsc_singleport_we_reg <= '1';
  END PROCESS core;

  maze_rsc_singleport_data_in <= maze_rsc_singleport_data_in_reg;
  maze_rsc_singleport_addr <= maze_rsc_singleport_addr_reg_sg2 & TO_STDLOGICVECTOR(maze_rsc_singleport_addr_reg_sg1)
      & maze_rsc_singleport_addr_reg_1;
  maze_rsc_singleport_re <= maze_rsc_singleport_re_reg;
  maze_rsc_singleport_we <= maze_rsc_singleport_we_reg;
END v2;

-- ------------------------------------------------------------------
--  Design Unit:    MazeMemory
--  Generated from file(s):
--    2) $PROJECT_HOME/../../src/MazeArray.cpp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE mgc_hls.singleport_ram_be_pkg.ALL;
USE work.MazeMemory_mux_pkg.ALL;


ENTITY MazeMemory IS
  PORT(
    row_rsc_z : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
    col_rsc_z : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
    val_rsc_z : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
    write_rsc_z : IN STD_LOGIC;
    out_rsc_z : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC
  );
END MazeMemory;

ARCHITECTURE v2 OF MazeMemory IS
  -- Default Constants
  SIGNAL PWR : STD_LOGIC;
  SIGNAL GND : STD_LOGIC;

  -- Interconnect Declarations
  SIGNAL row_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL col_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL val_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL write_rsc_mgc_in_wire_d : STD_LOGIC;
  SIGNAL out_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL maze_rsc_singleport_data_in : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL maze_rsc_singleport_addr : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL maze_rsc_singleport_re : STD_LOGIC;
  SIGNAL maze_rsc_singleport_we : STD_LOGIC;
  SIGNAL maze_rsc_singleport_data_out : STD_LOGIC_VECTOR (3 DOWNTO 0);

  SIGNAL row_rsc_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL row_rsc_mgc_in_wire_z : STD_LOGIC_VECTOR (4 DOWNTO 0);

  SIGNAL col_rsc_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (4 DOWNTO 0);
  SIGNAL col_rsc_mgc_in_wire_z : STD_LOGIC_VECTOR (4 DOWNTO 0);

  SIGNAL val_rsc_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL val_rsc_mgc_in_wire_z : STD_LOGIC_VECTOR (3 DOWNTO 0);

  SIGNAL write_rsc_mgc_in_wire_d_1 : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL write_rsc_mgc_in_wire_z : STD_LOGIC_VECTOR (0 DOWNTO 0);

  SIGNAL out_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL out_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (3 DOWNTO 0);

  SIGNAL maze_rsc_singleport_data_in_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL maze_rsc_singleport_addr_1 : STD_LOGIC_VECTOR (11 DOWNTO 0);
  SIGNAL maze_rsc_singleport_re_1 : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL maze_rsc_singleport_we_1 : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL maze_rsc_singleport_data_out_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);

  COMPONENT MazeMemory_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      row_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
      col_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (4 DOWNTO 0);
      val_rsc_mgc_in_wire_d : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
      write_rsc_mgc_in_wire_d : IN STD_LOGIC;
      out_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
      maze_rsc_singleport_data_in : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
      maze_rsc_singleport_addr : OUT STD_LOGIC_VECTOR (11 DOWNTO 0);
      maze_rsc_singleport_re : OUT STD_LOGIC;
      maze_rsc_singleport_we : OUT STD_LOGIC;
      maze_rsc_singleport_data_out : IN STD_LOGIC_VECTOR (3 DOWNTO 0)
    );
  END COMPONENT;
  SIGNAL MazeMemory_core_inst_row_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (4 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_col_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (4 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_val_rsc_mgc_in_wire_d : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_out_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_maze_rsc_singleport_data_in : STD_LOGIC_VECTOR (3 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_maze_rsc_singleport_addr : STD_LOGIC_VECTOR (11 DOWNTO
      0);
  SIGNAL MazeMemory_core_inst_maze_rsc_singleport_data_out : STD_LOGIC_VECTOR (3
      DOWNTO 0);

BEGIN
  -- Default Constant Signal Assignments
  PWR <= '1';
  GND <= '0';

  row_rsc_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 1,
      width => 5
      )
    PORT MAP(
      d => row_rsc_mgc_in_wire_d_1,
      z => row_rsc_mgc_in_wire_z
    );
  row_rsc_mgc_in_wire_d <= row_rsc_mgc_in_wire_d_1;
  row_rsc_mgc_in_wire_z <= row_rsc_z;

  col_rsc_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 2,
      width => 5
      )
    PORT MAP(
      d => col_rsc_mgc_in_wire_d_1,
      z => col_rsc_mgc_in_wire_z
    );
  col_rsc_mgc_in_wire_d <= col_rsc_mgc_in_wire_d_1;
  col_rsc_mgc_in_wire_z <= col_rsc_z;

  val_rsc_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 3,
      width => 4
      )
    PORT MAP(
      d => val_rsc_mgc_in_wire_d_1,
      z => val_rsc_mgc_in_wire_z
    );
  val_rsc_mgc_in_wire_d <= val_rsc_mgc_in_wire_d_1;
  val_rsc_mgc_in_wire_z <= val_rsc_z;

  write_rsc_mgc_in_wire : mgc_hls.mgc_ioport_comps.mgc_in_wire
    GENERIC MAP(
      rscid => 4,
      width => 1
      )
    PORT MAP(
      d => write_rsc_mgc_in_wire_d_1,
      z => write_rsc_mgc_in_wire_z
    );
  write_rsc_mgc_in_wire_d <= write_rsc_mgc_in_wire_d_1(0);
  write_rsc_mgc_in_wire_z(0) <= write_rsc_z;

  out_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 5,
      width => 4
      )
    PORT MAP(
      d => out_rsc_mgc_out_stdreg_d_1,
      z => out_rsc_mgc_out_stdreg_z
    );
  out_rsc_mgc_out_stdreg_d_1 <= out_rsc_mgc_out_stdreg_d;
  out_rsc_z <= out_rsc_mgc_out_stdreg_z;

  maze_rsc_singleport : mgc_hls.singleport_ram_be_pkg.singleport_ram_be
    GENERIC MAP(
      ram_id => 6,
      words => 4096,
      width => 4,
      addr_width => 12,
      a_reset_active => 0,
      s_reset_active => 1,
      enable_active => 0,
      re_active => 0,
      we_active => 0,
      num_byte_enables => 1,
      clock_edge => 1,
      num_input_registers => 1,
      num_output_registers => 0,
      no_of_singleport_readwrite_port => 1
      )
    PORT MAP(
      data_in => maze_rsc_singleport_data_in_1,
      addr => maze_rsc_singleport_addr_1,
      re => maze_rsc_singleport_re_1,
      we => maze_rsc_singleport_we_1,
      data_out => maze_rsc_singleport_data_out_1,
      clk => clk,
      a_rst => PWR,
      s_rst => rst,
      en => GND
    );
  maze_rsc_singleport_data_in_1 <= maze_rsc_singleport_data_in;
  maze_rsc_singleport_addr_1 <= maze_rsc_singleport_addr;
  maze_rsc_singleport_re_1(0) <= maze_rsc_singleport_re;
  maze_rsc_singleport_we_1(0) <= maze_rsc_singleport_we;
  maze_rsc_singleport_data_out <= maze_rsc_singleport_data_out_1;

  MazeMemory_core_inst : MazeMemory_core
    PORT MAP(
      clk => clk,
      rst => rst,
      row_rsc_mgc_in_wire_d => MazeMemory_core_inst_row_rsc_mgc_in_wire_d,
      col_rsc_mgc_in_wire_d => MazeMemory_core_inst_col_rsc_mgc_in_wire_d,
      val_rsc_mgc_in_wire_d => MazeMemory_core_inst_val_rsc_mgc_in_wire_d,
      write_rsc_mgc_in_wire_d => write_rsc_mgc_in_wire_d,
      out_rsc_mgc_out_stdreg_d => MazeMemory_core_inst_out_rsc_mgc_out_stdreg_d,
      maze_rsc_singleport_data_in => MazeMemory_core_inst_maze_rsc_singleport_data_in,
      maze_rsc_singleport_addr => MazeMemory_core_inst_maze_rsc_singleport_addr,
      maze_rsc_singleport_re => maze_rsc_singleport_re,
      maze_rsc_singleport_we => maze_rsc_singleport_we,
      maze_rsc_singleport_data_out => MazeMemory_core_inst_maze_rsc_singleport_data_out
    );
  MazeMemory_core_inst_row_rsc_mgc_in_wire_d <= row_rsc_mgc_in_wire_d;
  MazeMemory_core_inst_col_rsc_mgc_in_wire_d <= col_rsc_mgc_in_wire_d;
  MazeMemory_core_inst_val_rsc_mgc_in_wire_d <= val_rsc_mgc_in_wire_d;
  out_rsc_mgc_out_stdreg_d <= MazeMemory_core_inst_out_rsc_mgc_out_stdreg_d;
  maze_rsc_singleport_data_in <= MazeMemory_core_inst_maze_rsc_singleport_data_in;
  maze_rsc_singleport_addr <= MazeMemory_core_inst_maze_rsc_singleport_addr;
  MazeMemory_core_inst_maze_rsc_singleport_data_out <= maze_rsc_singleport_data_out;

END v2;



