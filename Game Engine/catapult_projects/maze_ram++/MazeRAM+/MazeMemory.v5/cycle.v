// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   kjr115@EEWS104A-006
//  Generated date: Fri May 06 17:34:20 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    MazeMemory_core
// ------------------------------------------------------------------


module MazeMemory_core (
  clk, rst, row_rsc_mgc_in_wire_d, col_rsc_mgc_in_wire_d, val_rsc_mgc_in_wire_d,
      write_rsc_mgc_in_wire_d, out_rsc_mgc_out_stdreg_d, maze_rsc_singleport_data_in,
      maze_rsc_singleport_addr, maze_rsc_singleport_re, maze_rsc_singleport_we, maze_rsc_singleport_data_out
);
  input clk;
  input rst;
  input [5:0] row_rsc_mgc_in_wire_d;
  input [5:0] col_rsc_mgc_in_wire_d;
  input [3:0] val_rsc_mgc_in_wire_d;
  input write_rsc_mgc_in_wire_d;
  output [3:0] out_rsc_mgc_out_stdreg_d;
  reg [3:0] out_rsc_mgc_out_stdreg_d;
  output [3:0] maze_rsc_singleport_data_in;
  output [11:0] maze_rsc_singleport_addr;
  output maze_rsc_singleport_re;
  output maze_rsc_singleport_we;
  input [3:0] maze_rsc_singleport_data_out;


  // Interconnect Declarations
  reg [3:0] maze_rsc_singleport_data_in_reg;
  reg maze_rsc_singleport_re_reg;
  reg maze_rsc_singleport_we_reg;
  reg [5:0] maze_rsc_singleport_addr_reg_sg1;
  reg [5:0] maze_rsc_singleport_addr_reg_1;


  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [11:0] maze_vinit_ndx_1_sva;
    reg [3:0] val_1_sva;
    reg if_nor_itm;
    reg [11:0] if_acc_itm;
    reg io_read_write_rsc_d_svs_st;
    reg [3:0] maze_rsc_singleport_data_in_reg_var;
    reg maze_rsc_singleport_re_reg_var;
    reg maze_rsc_singleport_we_reg_var;
    reg last_clk;
    reg [5:0] maze_rsc_singleport_addr_reg_var_sg1;
    reg [5:0] maze_rsc_singleport_addr_reg_var_1;

    begin : core_rlpExit
      forever begin : core_rlp
        // C-Step 0 of Loop 'core_rlp'
        maze_vinit_ndx_1_sva = 12'b111111111111;
        maze_rsc_singleport_data_in_reg <= 4'b0;
        maze_rsc_singleport_addr_reg_1 <= 6'b0;
        maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
        maze_rsc_singleport_re_reg <= 1'b1;
        maze_rsc_singleport_we_reg <= 1'b1;
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable core_rlpExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'core_rlp'
        begin : maze_vinitExit
          forever begin : maze_vinit
            // C-Step 0 of Loop 'maze_vinit'
            maze_rsc_singleport_data_in_reg <= 4'b0;
            maze_rsc_singleport_addr_reg_1 <= 6'b0;
            maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
            maze_rsc_singleport_re_reg <= 1'b1;
            maze_rsc_singleport_we_reg <= 1'b1;
            maze_rsc_singleport_we_reg <= 1'b0;
            maze_rsc_singleport_addr_reg_1 <= maze_vinit_ndx_1_sva[5:0];
            maze_rsc_singleport_addr_reg_sg1 <= maze_vinit_ndx_1_sva[11:6];
            maze_rsc_singleport_data_in_reg <= 4'b0;
            begin : waitLoop1Exit
              forever begin : waitLoop1
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop1Exit;
              end
            end
            // C-Step 1 of Loop 'maze_vinit'
            if_nor_itm = ~((maze_vinit_ndx_1_sva[11]) | (maze_vinit_ndx_1_sva[10])
                | (maze_vinit_ndx_1_sva[9]) | (maze_vinit_ndx_1_sva[8]) | (maze_vinit_ndx_1_sva[7])
                | (maze_vinit_ndx_1_sva[6]) | (maze_vinit_ndx_1_sva[5]) | (maze_vinit_ndx_1_sva[4])
                | (maze_vinit_ndx_1_sva[3]) | (maze_vinit_ndx_1_sva[2]) | (maze_vinit_ndx_1_sva[1])
                | (maze_vinit_ndx_1_sva[0]));
            if_acc_itm = maze_vinit_ndx_1_sva + 12'b111111111111;
            maze_rsc_singleport_data_in_reg <= 4'b0;
            maze_rsc_singleport_addr_reg_1 <= 6'b0;
            maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
            maze_rsc_singleport_re_reg <= 1'b1;
            maze_rsc_singleport_we_reg <= 1'b1;
            begin : waitLoop2Exit
              forever begin : waitLoop2
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop2Exit;
              end
            end
            // C-Step 2 of Loop 'maze_vinit'
            if ( if_nor_itm )
              disable maze_vinitExit;
            maze_vinit_ndx_1_sva = if_acc_itm;
          end
        end
        begin : mainExit
          forever begin : main
            // C-Step 0 of Loop 'main'
            maze_rsc_singleport_data_in_reg_var = maze_rsc_singleport_data_in_reg;
            maze_rsc_singleport_addr_reg_var_1 = maze_rsc_singleport_addr_reg_1;
            maze_rsc_singleport_addr_reg_var_sg1 = maze_rsc_singleport_addr_reg_sg1;
            maze_rsc_singleport_re_reg_var = maze_rsc_singleport_re_reg;
            maze_rsc_singleport_we_reg_var = maze_rsc_singleport_we_reg;
            begin : unreg_outs_lp_3Exit
              forever begin : unreg_outs_lp_3
                // C-Step 0 of Loop 'unreg_outs_lp_3'
                maze_rsc_singleport_data_in_reg <= 4'b0;
                maze_rsc_singleport_addr_reg_1 <= 6'b0;
                maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
                maze_rsc_singleport_re_reg <= 1'b1;
                maze_rsc_singleport_we_reg <= 1'b1;
                val_1_sva = val_rsc_mgc_in_wire_d;
                io_read_write_rsc_d_svs_st = write_rsc_mgc_in_wire_d;
                maze_rsc_singleport_addr_reg_1 <= col_rsc_mgc_in_wire_d;
                maze_rsc_singleport_addr_reg_sg1 <= row_rsc_mgc_in_wire_d;
                if ( io_read_write_rsc_d_svs_st ) begin
                  maze_rsc_singleport_we_reg <= 1'b0;
                  maze_rsc_singleport_data_in_reg <= val_1_sva;
                end
                else begin
                  maze_rsc_singleport_re_reg <= 1'b0;
                end
                last_clk = clk;
                @((clk) or (row_rsc_mgc_in_wire_d) or (col_rsc_mgc_in_wire_d) or
                    (val_rsc_mgc_in_wire_d) or (write_rsc_mgc_in_wire_d));
                // C-Step 0 of Loop 'unreg_outs_lp_3'
                if ( (~ last_clk) & clk )
                  disable unreg_outs_lp_3Exit;
                maze_rsc_singleport_data_in_reg <= maze_rsc_singleport_data_in_reg_var;
                maze_rsc_singleport_addr_reg_1 <= maze_rsc_singleport_addr_reg_var_1;
                maze_rsc_singleport_addr_reg_sg1 <= maze_rsc_singleport_addr_reg_var_sg1;
                maze_rsc_singleport_re_reg <= maze_rsc_singleport_re_reg_var;
                maze_rsc_singleport_we_reg <= maze_rsc_singleport_we_reg_var;
              end
            end
            if ( rst )
              disable core_rlpExit;
            maze_rsc_singleport_data_in_reg <= 4'b0;
            maze_rsc_singleport_addr_reg_1 <= 6'b0;
            maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
            maze_rsc_singleport_re_reg <= 1'b1;
            maze_rsc_singleport_we_reg <= 1'b1;
            begin : waitLoop3Exit
              forever begin : waitLoop3
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop3Exit;
              end
            end
            // C-Step 1 of Loop 'main'
            if ( io_read_write_rsc_d_svs_st ) begin
              out_rsc_mgc_out_stdreg_d <= val_1_sva;
            end
            else begin
              out_rsc_mgc_out_stdreg_d <= maze_rsc_singleport_data_out;
            end
            maze_rsc_singleport_data_in_reg <= 4'b0;
            maze_rsc_singleport_addr_reg_1 <= 6'b0;
            maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
            maze_rsc_singleport_re_reg <= 1'b1;
            maze_rsc_singleport_we_reg <= 1'b1;
            begin : waitLoop4Exit
              forever begin : waitLoop4
                @(posedge clk);
                if ( rst )
                  disable core_rlpExit;
                if ( clk )
                  disable waitLoop4Exit;
              end
            end
            // C-Step 2 of Loop 'main'
          end
        end
      end
    end
    maze_rsc_singleport_we_reg <= 1'b0;
    maze_rsc_singleport_re_reg <= 1'b0;
    maze_rsc_singleport_addr_reg_1 <= 6'b0;
    maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
    maze_rsc_singleport_data_in_reg <= 4'b0;
    out_rsc_mgc_out_stdreg_d <= 4'b0;
    maze_rsc_singleport_data_in_reg <= 4'b0;
    maze_rsc_singleport_addr_reg_1 <= 6'b0;
    maze_rsc_singleport_addr_reg_sg1 <= 6'b0;
    maze_rsc_singleport_re_reg <= 1'b1;
    maze_rsc_singleport_we_reg <= 1'b1;
  end

  assign maze_rsc_singleport_data_in = maze_rsc_singleport_data_in_reg;
  assign maze_rsc_singleport_addr = {maze_rsc_singleport_addr_reg_sg1 , maze_rsc_singleport_addr_reg_1};
  assign maze_rsc_singleport_re = maze_rsc_singleport_re_reg;
  assign maze_rsc_singleport_we = maze_rsc_singleport_we_reg;
endmodule

// ------------------------------------------------------------------
//  Design Unit:    MazeMemory
//  Generated from file(s):
//    2) $PROJECT_HOME/../../../src/MazeArray.cpp
// ------------------------------------------------------------------


module MazeMemory (
  row_rsc_z, col_rsc_z, val_rsc_z, write_rsc_z, out_rsc_z, clk, rst
);
  input [5:0] row_rsc_z;
  input [5:0] col_rsc_z;
  input [3:0] val_rsc_z;
  input write_rsc_z;
  output [3:0] out_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [5:0] row_rsc_mgc_in_wire_d;
  wire [5:0] col_rsc_mgc_in_wire_d;
  wire [3:0] val_rsc_mgc_in_wire_d;
  wire write_rsc_mgc_in_wire_d;
  wire [3:0] out_rsc_mgc_out_stdreg_d;
  wire [3:0] maze_rsc_singleport_data_in;
  wire [11:0] maze_rsc_singleport_addr;
  wire maze_rsc_singleport_re;
  wire maze_rsc_singleport_we;
  wire [3:0] maze_rsc_singleport_data_out;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(6)) row_rsc_mgc_in_wire (
      .d(row_rsc_mgc_in_wire_d),
      .z(row_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(6)) col_rsc_mgc_in_wire (
      .d(col_rsc_mgc_in_wire_d),
      .z(col_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(4)) val_rsc_mgc_in_wire (
      .d(val_rsc_mgc_in_wire_d),
      .z(val_rsc_z)
    );
  mgc_in_wire #(.rscid(4),
  .width(1)) write_rsc_mgc_in_wire (
      .d(write_rsc_mgc_in_wire_d),
      .z(write_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(4)) out_rsc_mgc_out_stdreg (
      .d(out_rsc_mgc_out_stdreg_d),
      .z(out_rsc_z)
    );
  singleport_ram_be #(.ram_id(7),
  .words(4096),
  .width(4),
  .addr_width(12),
  .a_reset_active(0),
  .s_reset_active(1),
  .enable_active(0),
  .re_active(0),
  .we_active(0),
  .num_byte_enables(1),
  .clock_edge(1),
  .num_input_registers(1),
  .num_output_registers(0),
  .no_of_singleport_readwrite_port(1)) maze_rsc_singleport (
      .data_in(maze_rsc_singleport_data_in),
      .addr(maze_rsc_singleport_addr),
      .re(maze_rsc_singleport_re),
      .we(maze_rsc_singleport_we),
      .data_out(maze_rsc_singleport_data_out),
      .clk(clk),
      .a_rst(1'b1),
      .s_rst(rst),
      .en(1'b0)
    );
  MazeMemory_core MazeMemory_core_inst (
      .clk(clk),
      .rst(rst),
      .row_rsc_mgc_in_wire_d(row_rsc_mgc_in_wire_d),
      .col_rsc_mgc_in_wire_d(col_rsc_mgc_in_wire_d),
      .val_rsc_mgc_in_wire_d(val_rsc_mgc_in_wire_d),
      .write_rsc_mgc_in_wire_d(write_rsc_mgc_in_wire_d),
      .out_rsc_mgc_out_stdreg_d(out_rsc_mgc_out_stdreg_d),
      .maze_rsc_singleport_data_in(maze_rsc_singleport_data_in),
      .maze_rsc_singleport_addr(maze_rsc_singleport_addr),
      .maze_rsc_singleport_re(maze_rsc_singleport_re),
      .maze_rsc_singleport_we(maze_rsc_singleport_we),
      .maze_rsc_singleport_data_out(maze_rsc_singleport_data_out)
    );
endmodule



