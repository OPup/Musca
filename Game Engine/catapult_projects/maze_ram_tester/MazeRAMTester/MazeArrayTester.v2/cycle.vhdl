-- ----------------------------------------------------------------------
--  HLS HDL:        VHDL Netlister
--  HLS Version:    2011a.126 Production Release
--  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
-- 
--  Generated by:   kjr115@EEWS104A-006
--  Generated date: Fri May 06 17:31:48 2016
-- ----------------------------------------------------------------------

-- 
-- ------------------------------------------------------------------
--  Design Unit:    MazeArrayTester_core
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.MazeArrayTester_mux_pkg.ALL;


ENTITY MazeArrayTester_core IS
  PORT(
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC;
    row_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    col_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    out_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    write_rsc_mgc_out_stdreg_d : OUT STD_LOGIC
  );
END MazeArrayTester_core;

ARCHITECTURE v2 OF MazeArrayTester_core IS
  -- Default Constants

BEGIN
  -- Default Constant Signal Assignments

  core : PROCESS
    -- Interconnect Declarations
    VARIABLE written_sva : STD_LOGIC;
    VARIABLE if_for_for_j_1_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE if_for_i_1_sva_1 : STD_LOGIC_VECTOR (6 DOWNTO 0);
    VARIABLE if_for_i_1_sva_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);
    VARIABLE if_for_for_j_1_sva_2 : STD_LOGIC_VECTOR (5 DOWNTO 0);

  BEGIN
    core_rlp : LOOP
      -- C-Step 0 of Loop 'core_rlp'
      written_sva := '0';
      WAIT UNTIL clk'EVENT AND ( clk = '1' );
      EXIT core_rlp WHEN ( rst = '1' );
      -- C-Step 1 of Loop 'core_rlp'
      main : LOOP
        -- C-Step 0 of Loop 'main'
        IF ( written_sva = '1' ) THEN
          write_rsc_mgc_out_stdreg_d <= '0';
        ELSE
          write_rsc_mgc_out_stdreg_d <= '1';
          if_for_i_1_sva_2 := STD_LOGIC_VECTOR'("000000");
        END IF;
        WAIT UNTIL clk'EVENT AND ( clk = '1' );
        EXIT core_rlp WHEN ( rst = '1' );
        -- C-Step 1 of Loop 'main'
        IF ( written_sva = '1' ) THEN
        ELSE
          if_for : LOOP
            -- C-Step 0 of Loop 'if_for'
            if_for_for_j_1_sva_2 := STD_LOGIC_VECTOR'("000000");
            if_for_for : LOOP
              -- C-Step 0 of Loop 'if_for_for'
              row_rsc_mgc_out_stdreg_d <= if_for_i_1_sva_2;
              col_rsc_mgc_out_stdreg_d <= if_for_for_j_1_sva_2;
              WAIT UNTIL clk'EVENT AND ( clk = '1' );
              EXIT core_rlp WHEN ( rst = '1' );
              -- C-Step 1 of Loop 'if_for_for'
              out_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR(UNSIGNED'("000") & CONV_UNSIGNED((NOT((NOT((if_for_i_1_sva_2(5))
                  AND (if_for_i_1_sva_2(4)) AND (if_for_i_1_sva_2(3)) AND (if_for_i_1_sva_2(2))
                  AND (if_for_i_1_sva_2(1)) AND (if_for_i_1_sva_2(0)))) AND ((if_for_i_1_sva_2(5))
                  OR (if_for_i_1_sva_2(4)) OR (if_for_i_1_sva_2(3)) OR (if_for_i_1_sva_2(2))
                  OR (if_for_i_1_sva_2(1)) OR (if_for_i_1_sva_2(0))))) OR (NOT((NOT((if_for_for_j_1_sva_2(5))
                  AND (if_for_for_j_1_sva_2(4)) AND (if_for_for_j_1_sva_2(3)) AND
                  (if_for_for_j_1_sva_2(2)) AND (if_for_for_j_1_sva_2(1)) AND (if_for_for_j_1_sva_2(0))))
                  AND ((if_for_for_j_1_sva_2(5)) OR (if_for_for_j_1_sva_2(4)) OR
                  (if_for_for_j_1_sva_2(3)) OR (if_for_for_j_1_sva_2(2)) OR (if_for_for_j_1_sva_2(1))
                  OR (if_for_for_j_1_sva_2(0))))), 1));
              if_for_for_j_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(if_for_for_j_1_sva_2),
                  7) + CONV_UNSIGNED(CONV_UNSIGNED('1', 1), 7), 7));
              WAIT UNTIL clk'EVENT AND ( clk = '1' );
              EXIT core_rlp WHEN ( rst = '1' );
              -- C-Step 2 of Loop 'if_for_for'
              EXIT if_for_for WHEN ( (if_for_for_j_1_sva_1(6)) = '1' );
              if_for_for_j_1_sva_2 := if_for_for_j_1_sva_1(5 DOWNTO 0);
            END LOOP if_for_for;

            WAIT UNTIL clk'EVENT AND ( clk = '1' );
            EXIT core_rlp WHEN ( rst = '1' );
            -- C-Step 1 of Loop 'if_for'
            if_for_i_1_sva_1 := STD_LOGIC_VECTOR(CONV_UNSIGNED(CONV_UNSIGNED(UNSIGNED(if_for_i_1_sva_2),
                7) + CONV_UNSIGNED(CONV_UNSIGNED('1', 1), 7), 7));
            EXIT if_for WHEN ( (if_for_i_1_sva_1(6)) = '1' );
            if_for_i_1_sva_2 := if_for_i_1_sva_1(5 DOWNTO 0);
          END LOOP if_for;

        END IF;
        written_sva := '1';
      END LOOP main;

    END LOOP core_rlp;

    if_for_for_j_1_sva_2 := STD_LOGIC_VECTOR'("000000");
    if_for_i_1_sva_2 := STD_LOGIC_VECTOR'("000000");
    if_for_i_1_sva_1 := STD_LOGIC_VECTOR'("0000000");
    if_for_for_j_1_sva_1 := STD_LOGIC_VECTOR'("0000000");
    written_sva := '0';
    write_rsc_mgc_out_stdreg_d <= '0';
    out_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("0000");
    col_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("000000");
    row_rsc_mgc_out_stdreg_d <= STD_LOGIC_VECTOR'("000000");
  END PROCESS core;

END v2;

-- ------------------------------------------------------------------
--  Design Unit:    MazeArrayTester
--  Generated from file(s):
--    2) $PROJECT_HOME/../../src/MazeArrayTester.cpp
-- ------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
LIBRARY mgc_hls;
USE mgc_hls.funcs.ALL;
USE work.MazeArrayTester_mux_pkg.ALL;


ENTITY MazeArrayTester IS
  PORT(
    row_rsc_z : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    col_rsc_z : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
    out_rsc_z : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
    write_rsc_z : OUT STD_LOGIC;
    clk : IN STD_LOGIC;
    rst : IN STD_LOGIC
  );
END MazeArrayTester;

ARCHITECTURE v2 OF MazeArrayTester IS
  -- Default Constants

  -- Interconnect Declarations
  SIGNAL row_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL col_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL out_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL write_rsc_mgc_out_stdreg_d : STD_LOGIC;

  SIGNAL row_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL row_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (5 DOWNTO 0);

  SIGNAL col_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (5 DOWNTO 0);
  SIGNAL col_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (5 DOWNTO 0);

  SIGNAL out_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (3 DOWNTO 0);
  SIGNAL out_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (3 DOWNTO 0);

  SIGNAL write_rsc_mgc_out_stdreg_d_1 : STD_LOGIC_VECTOR (0 DOWNTO 0);
  SIGNAL write_rsc_mgc_out_stdreg_z : STD_LOGIC_VECTOR (0 DOWNTO 0);

  COMPONENT MazeArrayTester_core
    PORT(
      clk : IN STD_LOGIC;
      rst : IN STD_LOGIC;
      row_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
      col_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (5 DOWNTO 0);
      out_rsc_mgc_out_stdreg_d : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
      write_rsc_mgc_out_stdreg_d : OUT STD_LOGIC
    );
  END COMPONENT;
  SIGNAL MazeArrayTester_core_inst_row_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (5
      DOWNTO 0);
  SIGNAL MazeArrayTester_core_inst_col_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (5
      DOWNTO 0);
  SIGNAL MazeArrayTester_core_inst_out_rsc_mgc_out_stdreg_d : STD_LOGIC_VECTOR (3
      DOWNTO 0);

BEGIN
  -- Default Constant Signal Assignments

  row_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 1,
      width => 6
      )
    PORT MAP(
      d => row_rsc_mgc_out_stdreg_d_1,
      z => row_rsc_mgc_out_stdreg_z
    );
  row_rsc_mgc_out_stdreg_d_1 <= row_rsc_mgc_out_stdreg_d;
  row_rsc_z <= row_rsc_mgc_out_stdreg_z;

  col_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 2,
      width => 6
      )
    PORT MAP(
      d => col_rsc_mgc_out_stdreg_d_1,
      z => col_rsc_mgc_out_stdreg_z
    );
  col_rsc_mgc_out_stdreg_d_1 <= col_rsc_mgc_out_stdreg_d;
  col_rsc_z <= col_rsc_mgc_out_stdreg_z;

  out_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 3,
      width => 4
      )
    PORT MAP(
      d => out_rsc_mgc_out_stdreg_d_1,
      z => out_rsc_mgc_out_stdreg_z
    );
  out_rsc_mgc_out_stdreg_d_1 <= out_rsc_mgc_out_stdreg_d;
  out_rsc_z <= out_rsc_mgc_out_stdreg_z;

  write_rsc_mgc_out_stdreg : mgc_hls.mgc_ioport_comps.mgc_out_stdreg
    GENERIC MAP(
      rscid => 4,
      width => 1
      )
    PORT MAP(
      d => write_rsc_mgc_out_stdreg_d_1,
      z => write_rsc_mgc_out_stdreg_z
    );
  write_rsc_mgc_out_stdreg_d_1(0) <= write_rsc_mgc_out_stdreg_d;
  write_rsc_z <= write_rsc_mgc_out_stdreg_z(0);

  MazeArrayTester_core_inst : MazeArrayTester_core
    PORT MAP(
      clk => clk,
      rst => rst,
      row_rsc_mgc_out_stdreg_d => MazeArrayTester_core_inst_row_rsc_mgc_out_stdreg_d,
      col_rsc_mgc_out_stdreg_d => MazeArrayTester_core_inst_col_rsc_mgc_out_stdreg_d,
      out_rsc_mgc_out_stdreg_d => MazeArrayTester_core_inst_out_rsc_mgc_out_stdreg_d,
      write_rsc_mgc_out_stdreg_d => write_rsc_mgc_out_stdreg_d
    );
  row_rsc_mgc_out_stdreg_d <= MazeArrayTester_core_inst_row_rsc_mgc_out_stdreg_d;
  col_rsc_mgc_out_stdreg_d <= MazeArrayTester_core_inst_col_rsc_mgc_out_stdreg_d;
  out_rsc_mgc_out_stdreg_d <= MazeArrayTester_core_inst_out_rsc_mgc_out_stdreg_d;

END v2;



