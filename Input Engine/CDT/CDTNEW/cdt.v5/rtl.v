// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-005
//  Generated date: Thu Apr 28 17:52:26 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    cdt_core
// ------------------------------------------------------------------


module cdt_core (
  clk, arst_n, H_IN_rsc_mgc_in_wire_d, S_IN_rsc_mgc_in_wire_d, V_IN_rsc_mgc_in_wire_d,
      R_OUT_rsc_mgc_out_stdreg_d, B_OUT_rsc_mgc_out_stdreg_d
);
  input clk;
  input arst_n;
  input [9:0] H_IN_rsc_mgc_in_wire_d;
  input [9:0] S_IN_rsc_mgc_in_wire_d;
  input [9:0] V_IN_rsc_mgc_in_wire_d;
  output [9:0] R_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] B_OUT_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations
  reg if_else_slc_svs;
  reg reg_B_OUT_rsc_mgc_out_stdreg_d_reg;
  reg reg_R_OUT_rsc_mgc_out_stdreg_d_reg;
  wire [5:0] if_oelse_acc_itm;
  wire [6:0] nl_if_oelse_acc_itm;
  wire [9:0] if_if_acc_itm;
  wire [10:0] nl_if_if_acc_itm;
  wire [7:0] if_acc_2_itm;
  wire [8:0] nl_if_acc_2_itm;
  wire [9:0] if_acc_1_itm;
  wire [10:0] nl_if_acc_1_itm;
  wire if_else_slc_svs_mx0;
  wire if_lor_lpi_dfm;
  wire land_lpi_dfm;


  // Interconnect Declarations for Component Instantiations 
  assign B_OUT_rsc_mgc_out_stdreg_d = {{9{reg_B_OUT_rsc_mgc_out_stdreg_d_reg}}, reg_B_OUT_rsc_mgc_out_stdreg_d_reg};
  assign R_OUT_rsc_mgc_out_stdreg_d = {{9{reg_R_OUT_rsc_mgc_out_stdreg_d_reg}}, reg_R_OUT_rsc_mgc_out_stdreg_d_reg};
  assign if_else_slc_svs_mx0 = MUX_s_1_2_2({(readslicef_9_1_8((conv_u2u_8_9(H_IN_rsc_mgc_in_wire_d[9:2])
      + 9'b111010011))) , if_else_slc_svs}, (if_acc_1_itm[9]) | (if_acc_2_itm[7])
      | (~((if_if_acc_itm[9]) & (if_oelse_acc_itm[5]))));
  assign if_lor_lpi_dfm = ~((if_oelse_acc_itm[5]) & (if_if_acc_itm[9]));
  assign nl_if_oelse_acc_itm = ({1'b1 , (~ (H_IN_rsc_mgc_in_wire_d[8:4]))}) + 6'b1;
  assign if_oelse_acc_itm = nl_if_oelse_acc_itm[5:0];
  assign nl_if_if_acc_itm = conv_u2u_9_10(H_IN_rsc_mgc_in_wire_d[9:1]) + 10'b1101010001;
  assign if_if_acc_itm = nl_if_if_acc_itm[9:0];
  assign nl_if_acc_2_itm = conv_u2u_7_8(V_IN_rsc_mgc_in_wire_d[9:3]) + 8'b11111011;
  assign if_acc_2_itm = nl_if_acc_2_itm[7:0];
  assign land_lpi_dfm = ~((if_acc_2_itm[7]) | (if_acc_1_itm[9]));
  assign nl_if_acc_1_itm = conv_u2u_9_10(S_IN_rsc_mgc_in_wire_d[9:1]) + 10'b1111100111;
  assign if_acc_1_itm = nl_if_acc_1_itm[9:0];
  always @(posedge clk or negedge arst_n) begin
    if ( ~ arst_n ) begin
      if_else_slc_svs <= 1'b0;
      reg_B_OUT_rsc_mgc_out_stdreg_d_reg <= 1'b0;
      reg_R_OUT_rsc_mgc_out_stdreg_d_reg <= 1'b0;
    end
    else begin
      if_else_slc_svs <= if_else_slc_svs_mx0;
      reg_B_OUT_rsc_mgc_out_stdreg_d_reg <= ~((readslicef_11_1_10((({1'b1 , (~ H_IN_rsc_mgc_in_wire_d)})
          + 11'b100000101))) | if_else_slc_svs_mx0 | if_lor_lpi_dfm | (~ land_lpi_dfm));
      reg_R_OUT_rsc_mgc_out_stdreg_d_reg <= if_lor_lpi_dfm & land_lpi_dfm;
    end
  end

  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [0:0] readslicef_9_1_8;
    input [8:0] vector;
    reg [8:0] tmp;
  begin
    tmp = vector >> 8;
    readslicef_9_1_8 = tmp[0:0];
  end
  endfunction


  function [0:0] readslicef_11_1_10;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 10;
    readslicef_11_1_10 = tmp[0:0];
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function  [7:0] conv_u2u_7_8 ;
    input [6:0]  vector ;
  begin
    conv_u2u_7_8 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    cdt
//  Generated from file(s):
//    2) $PROJECT_HOME/cdt.cpp
// ------------------------------------------------------------------


module cdt (
  H_IN_rsc_z, S_IN_rsc_z, V_IN_rsc_z, R_OUT_rsc_z, G_OUT_rsc_z, B_OUT_rsc_z, clk,
      arst_n
);
  input [9:0] H_IN_rsc_z;
  input [9:0] S_IN_rsc_z;
  input [9:0] V_IN_rsc_z;
  output [9:0] R_OUT_rsc_z;
  output [9:0] G_OUT_rsc_z;
  output [9:0] B_OUT_rsc_z;
  input clk;
  input arst_n;


  // Interconnect Declarations
  wire [9:0] H_IN_rsc_mgc_in_wire_d;
  wire [9:0] S_IN_rsc_mgc_in_wire_d;
  wire [9:0] V_IN_rsc_mgc_in_wire_d;
  wire [9:0] R_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] B_OUT_rsc_mgc_out_stdreg_d;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) H_IN_rsc_mgc_in_wire (
      .d(H_IN_rsc_mgc_in_wire_d),
      .z(H_IN_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) S_IN_rsc_mgc_in_wire (
      .d(S_IN_rsc_mgc_in_wire_d),
      .z(S_IN_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(10)) V_IN_rsc_mgc_in_wire (
      .d(V_IN_rsc_mgc_in_wire_d),
      .z(V_IN_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) R_OUT_rsc_mgc_out_stdreg (
      .d(R_OUT_rsc_mgc_out_stdreg_d),
      .z(R_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) G_OUT_rsc_mgc_out_stdreg (
      .d(10'b0),
      .z(G_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(10)) B_OUT_rsc_mgc_out_stdreg (
      .d(B_OUT_rsc_mgc_out_stdreg_d),
      .z(B_OUT_rsc_z)
    );
  cdt_core cdt_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .H_IN_rsc_mgc_in_wire_d(H_IN_rsc_mgc_in_wire_d),
      .S_IN_rsc_mgc_in_wire_d(S_IN_rsc_mgc_in_wire_d),
      .V_IN_rsc_mgc_in_wire_d(V_IN_rsc_mgc_in_wire_d),
      .R_OUT_rsc_mgc_out_stdreg_d(R_OUT_rsc_mgc_out_stdreg_d),
      .B_OUT_rsc_mgc_out_stdreg_d(B_OUT_rsc_mgc_out_stdreg_d)
    );
endmodule



