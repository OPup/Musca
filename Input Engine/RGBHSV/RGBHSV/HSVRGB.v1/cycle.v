// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-005
//  Generated date: Wed Apr 27 18:05:49 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    HSVRGB_core
// ------------------------------------------------------------------


module HSVRGB_core (
  clk, rst, r_rsc_mgc_in_wire_d, g_rsc_mgc_in_wire_d, b_rsc_mgc_in_wire_d, H_OUT_rsc_mgc_out_stdreg_d,
      S_OUT_rsc_mgc_out_stdreg_d, V_OUT_rsc_mgc_out_stdreg_d, div_mgc_div_a, div_mgc_div_b,
      div_mgc_div_z, div_mgc_div_1_a, div_mgc_div_1_b, div_mgc_div_1_z, div_mgc_div_2_a,
      div_mgc_div_2_b, div_mgc_div_2_z, div_mgc_div_3_a, div_mgc_div_3_b, div_mgc_div_3_z,
      div_mgc_div_4_a, div_mgc_div_4_b, div_mgc_div_4_z, div_mgc_div_5_a, div_mgc_div_5_b,
      div_mgc_div_5_z, div_mgc_div_6_a, div_mgc_div_6_b, div_mgc_div_6_z, div_mgc_div_7_a,
      div_mgc_div_7_b, div_mgc_div_7_z
);
  input clk;
  input rst;
  input [9:0] r_rsc_mgc_in_wire_d;
  input [9:0] g_rsc_mgc_in_wire_d;
  input [9:0] b_rsc_mgc_in_wire_d;
  output [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  output [10:0] div_mgc_div_a;
  reg [10:0] div_mgc_div_a;
  output [10:0] div_mgc_div_b;
  reg [10:0] div_mgc_div_b;
  input [10:0] div_mgc_div_z;
  output [10:0] div_mgc_div_1_a;
  reg [10:0] div_mgc_div_1_a;
  output [10:0] div_mgc_div_1_b;
  reg [10:0] div_mgc_div_1_b;
  input [10:0] div_mgc_div_1_z;
  output [10:0] div_mgc_div_2_a;
  reg [10:0] div_mgc_div_2_a;
  output [10:0] div_mgc_div_2_b;
  reg [10:0] div_mgc_div_2_b;
  input [10:0] div_mgc_div_2_z;
  output [10:0] div_mgc_div_3_a;
  reg [10:0] div_mgc_div_3_a;
  output [10:0] div_mgc_div_3_b;
  reg [10:0] div_mgc_div_3_b;
  input [10:0] div_mgc_div_3_z;
  output [10:0] div_mgc_div_4_a;
  reg [10:0] div_mgc_div_4_a;
  output [10:0] div_mgc_div_4_b;
  reg [10:0] div_mgc_div_4_b;
  input [10:0] div_mgc_div_4_z;
  output [10:0] div_mgc_div_5_a;
  reg [10:0] div_mgc_div_5_a;
  output [10:0] div_mgc_div_5_b;
  reg [10:0] div_mgc_div_5_b;
  input [10:0] div_mgc_div_5_z;
  output [9:0] div_mgc_div_6_a;
  reg [9:0] div_mgc_div_6_a;
  output [9:0] div_mgc_div_6_b;
  reg [9:0] div_mgc_div_6_b;
  input [9:0] div_mgc_div_6_z;
  output [9:0] div_mgc_div_7_a;
  reg [9:0] div_mgc_div_7_a;
  output [9:0] div_mgc_div_7_b;
  reg [9:0] div_mgc_div_7_b;
  input [9:0] div_mgc_div_7_z;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [9:0] r_1_sva;
    reg [9:0] g_1_sva;
    reg [9:0] b_1_sva;
    reg slc_svs;
    reg if_slc_svs;
    reg else_1_slc_svs;
    reg [9:0] max_lpi_dfm_3;
    reg slc_1_svs;
    reg if_3_slc_svs;
    reg else_5_slc_svs;
    reg [9:0] min_lpi_dfm_3;
    reg [8:0] v_sg1_sva;
    reg equal_svs;
    reg [9:0] delta_sva;
    reg unequal_tmp;
    reg [9:0] r_1_lpi_dfm;
    reg [9:0] g_1_lpi_dfm;
    reg [9:0] b_1_lpi_dfm;
    reg [7:0] s_sg1_lpi_dfm;
    reg else_7_equal_svs;
    reg else_7_else_1_equal_svs;
    reg [4:0] else_7_else_1_if_ac_fixed_cctor_sg2_1_sva;
    reg [3:0] else_7_else_1_else_ac_fixed_cctor_sg2_1_sva;
    reg h_sg3_lpi_dfm_1;
    reg h_sg2_lpi_dfm_1;
    reg [5:0] else_7_acc_3_psp_sva;
    reg else_7_if_div_2cyc;
    reg [7:0] s_sg1_sva_2_duc;
    reg else_7_if_1_div_2cyc;
    reg [10:0] else_7_if_1_slc_tmp;
    reg [5:0] else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc;
    reg else_7_else_1_if_div_2cyc;
    reg [10:0] else_7_else_1_if_slc_tmp;
    reg [5:0] div_sdt_2_sva_duc;
    reg else_7_else_1_else_div_2cyc;
    reg [10:0] else_7_else_1_else_slc_tmp;
    reg [5:0] div_sdt_3_sva_duc;
    reg [10:0] else_7_if_1_slc_tmp_mut;
    reg [10:0] else_7_else_1_else_slc_tmp_mut;
    reg [10:0] else_7_else_1_else_slc_tmp_mut_1;
    reg [10:0] else_7_else_1_if_slc_tmp_mut;
    reg [10:0] else_7_else_1_if_slc_tmp_mut_1;
    reg [10:0] else_7_if_1_slc_tmp_mut_1;
    reg [9:0] delta_sva_mut;
    reg [9:0] max_lpi_dfm_3_mut;
    reg [9:0] delta_sva_mut_1;
    reg [9:0] max_lpi_dfm_3_mut_1;
    reg else_7_else_1_equal_svs_1;
    reg else_7_else_1_equal_svs_2;
    reg equal_svs_1;
    reg equal_svs_2;
    reg unequal_tmp_1;
    reg unequal_tmp_2;
    reg else_7_equal_svs_1;
    reg else_7_equal_svs_2;
    reg [10:0] else_7_if_1_slc_tmp_mut_2;
    reg [10:0] else_7_else_1_else_slc_tmp_mut_2;
    reg [10:0] else_7_else_1_else_slc_tmp_mut_3;
    reg [10:0] else_7_else_1_if_slc_tmp_mut_2;
    reg [10:0] else_7_else_1_if_slc_tmp_mut_3;
    reg [10:0] else_7_if_1_slc_tmp_mut_3;
    reg [9:0] delta_sva_mut_2;
    reg [9:0] max_lpi_dfm_3_mut_2;
    reg [9:0] delta_sva_mut_3;
    reg [9:0] max_lpi_dfm_3_mut_3;
    reg [9:0] max_lpi_dfm_3_st;
    reg else_7_if_div_2cyc_st;
    reg else_7_equal_svs_st;
    reg else_7_if_1_div_2cyc_st;
    reg else_7_else_1_equal_svs_st;
    reg else_7_else_1_if_div_2cyc_st;
    reg else_7_else_1_else_div_2cyc_st;
    reg [8:0] acc_4_itm_1;
    reg [8:0] acc_4_itm_2;
    reg equal_svs_st_1;
    reg [9:0] max_lpi_dfm_3_st_1;
    reg else_7_if_div_2cyc_st_1;
    reg equal_svs_st_2;
    reg [9:0] max_lpi_dfm_3_st_2;
    reg else_7_if_div_2cyc_st_2;
    reg else_7_equal_svs_st_1;
    reg else_7_if_1_div_2cyc_st_1;
    reg else_7_equal_svs_st_2;
    reg else_7_if_1_div_2cyc_st_2;
    reg else_7_else_1_equal_svs_st_1;
    reg else_7_else_1_if_div_2cyc_st_1;
    reg else_7_else_1_equal_svs_st_2;
    reg else_7_else_1_if_div_2cyc_st_2;
    reg else_7_else_1_else_div_2cyc_st_1;
    reg else_7_else_1_else_div_2cyc_st_2;
    reg main_stage_0_2;
    reg main_stage_0_3;
    reg [9:0] mut_12;
    reg [9:0] mut_13;
    reg [9:0] mut_14;
    reg [9:0] mut_15;
    reg [9:0] mut_16;
    reg [9:0] mut_17;
    reg [9:0] mut_18;
    reg [9:0] mut_19;
    reg [9:0] mut_20;
    reg [9:0] mut_21;
    reg [9:0] mut_22;
    reg [9:0] mut_23;

    reg[0:0] else_7_else_1_mux_1_nl;
    reg[0:0] else_7_else_1_mux_2_nl;
    reg[2:0] else_7_mux1h_nl;
    reg[0:0] else_7_mux_4_nl;
    reg[0:0] else_7_else_1_mux_nl;
    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        div_mgc_div_a <= 11'b0;
        div_mgc_div_b <= 11'b0;
        div_mgc_div_1_a <= 11'b0;
        div_mgc_div_1_b <= 11'b0;
        div_mgc_div_2_a <= 11'b0;
        div_mgc_div_2_b <= 11'b0;
        div_mgc_div_3_a <= 11'b0;
        div_mgc_div_3_b <= 11'b0;
        div_mgc_div_4_a <= 11'b0;
        div_mgc_div_4_b <= 11'b0;
        div_mgc_div_5_a <= 11'b0;
        div_mgc_div_5_b <= 11'b0;
        div_mgc_div_6_a <= 10'b0;
        div_mgc_div_6_b <= 10'b0;
        div_mgc_div_7_a <= 10'b0;
        div_mgc_div_7_b <= 10'b0;
        if ( main_stage_0_3 ) begin
          else_7_acc_3_psp_sva = 6'b0;
          else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = 4'b0;
          else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = 5'b0;
          s_sg1_lpi_dfm = 8'b0;
          if ( equal_svs_st_2 ) begin
          end
          else begin
            case (max_lpi_dfm_3_st_2)
              10'b0 : begin
                // NOP
              end
              default : begin
                if ( else_7_if_div_2cyc_st_2 ) begin
                  s_sg1_sva_2_duc = div_mgc_div_6_z[7:0];
                end
                else begin
                  s_sg1_sva_2_duc = div_mgc_div_7_z[7:0];
                end
              end
            endcase
            s_sg1_lpi_dfm = s_sg1_sva_2_duc & ({{7{unequal_tmp_2}}, unequal_tmp_2});
            if ( else_7_equal_svs_st_2 ) begin
              if ( else_7_if_1_div_2cyc_st_2 ) begin
                else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = div_mgc_div_z[5:0];
              end
              else begin
                else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = div_mgc_div_5_z[5:0];
              end
            end
            else if ( else_7_else_1_equal_svs_st_2 ) begin
              if ( else_7_else_1_if_div_2cyc_st_2 ) begin
                div_sdt_2_sva_duc = div_mgc_div_4_z[5:0];
              end
              else begin
                div_sdt_2_sva_duc = div_mgc_div_3_z[5:0];
              end
              else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = (div_sdt_2_sva_duc[5:1])
                  + 5'b1;
            end
            else begin
              if ( else_7_else_1_else_div_2cyc_st_2 ) begin
                div_sdt_3_sva_duc = div_mgc_div_2_z[5:0];
              end
              else begin
                div_sdt_3_sva_duc = div_mgc_div_1_z[5:0];
              end
              else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = (div_sdt_3_sva_duc[5:2])
                  + 4'b1;
            end
            else_7_else_1_mux_1_nl = MUX_s_1_2_2({(div_sdt_3_sva_duc[1]) , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[0])},
                else_7_else_1_equal_svs_2);
            h_sg3_lpi_dfm_1 = MUX_s_1_2_2({(else_7_else_1_mux_1_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[1])},
                else_7_equal_svs_2);
            else_7_else_1_mux_2_nl = MUX_s_1_2_2({(div_sdt_3_sva_duc[0]) , (div_sdt_2_sva_duc[0])},
                else_7_else_1_equal_svs_2);
            h_sg2_lpi_dfm_1 = MUX_s_1_2_2({(else_7_else_1_mux_2_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[0])},
                else_7_equal_svs_2);
            else_7_mux1h_nl = MUX1HOT_v_3_3_2({(else_7_else_1_else_ac_fixed_cctor_sg2_1_sva[3:1])
                , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[4:2]) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[5:3])},
                {(~(else_7_else_1_equal_svs_2 | else_7_equal_svs_2)) , (else_7_else_1_equal_svs_2
                & (~ else_7_equal_svs_2)) , else_7_equal_svs_2});
            else_7_else_1_mux_nl = MUX_s_1_2_2({(else_7_else_1_else_ac_fixed_cctor_sg2_1_sva[0])
                , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[1])}, else_7_else_1_equal_svs_2);
            else_7_mux_4_nl = MUX_s_1_2_2({(else_7_else_1_mux_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[2])},
                else_7_equal_svs_2);
            else_7_acc_3_psp_sva = readslicef_7_6_1((({(~ (else_7_mux1h_nl)) , (~
                (else_7_mux_4_nl)) , (~ h_sg3_lpi_dfm_1) , (~ h_sg2_lpi_dfm_1) ,
                1'b1}) + ({h_sg3_lpi_dfm_1 , h_sg2_lpi_dfm_1 , 5'b1})));
          end
          H_OUT_rsc_mgc_out_stdreg_d <= {2'b0 , ((else_7_acc_3_psp_sva[5:1]) & (signext_5_1(~
              equal_svs_2))) , ((else_7_acc_3_psp_sva[0]) & (~ equal_svs_2)) , 2'b0};
          S_OUT_rsc_mgc_out_stdreg_d <= {conv_s2u_16_8(8'b11001 * (s_sg1_lpi_dfm
              & (signext_8_1(~ equal_svs_2)))) , 2'b0};
          V_OUT_rsc_mgc_out_stdreg_d <= {1'b0 , acc_4_itm_2};
        end
        if ( main_stage_0_2 ) begin
          if ( equal_svs_st_1 ) begin
          end
          else begin
            case (max_lpi_dfm_3_st_1)
              10'b0 : begin
                // NOP
              end
              default : begin
                if ( else_7_if_div_2cyc_st_1 ) begin
                  div_mgc_div_6_a <= delta_sva_mut_2;
                  div_mgc_div_6_b <= max_lpi_dfm_3_mut_2;
                end
                else begin
                  div_mgc_div_7_a <= delta_sva_mut_3;
                  div_mgc_div_7_b <= max_lpi_dfm_3_mut_3;
                end
              end
            endcase
            if ( else_7_equal_svs_st_1 ) begin
              if ( else_7_if_1_div_2cyc_st_1 ) begin
                div_mgc_div_a <= else_7_if_1_slc_tmp_mut_2;
                div_mgc_div_b <= {1'b0 , mut_18};
              end
              else begin
                div_mgc_div_5_a <= else_7_if_1_slc_tmp_mut_3;
                div_mgc_div_5_b <= {1'b0 , mut_23};
              end
            end
            else if ( else_7_else_1_equal_svs_st_1 ) begin
              if ( else_7_else_1_if_div_2cyc_st_1 ) begin
                div_mgc_div_4_a <= else_7_else_1_if_slc_tmp_mut_3;
                div_mgc_div_4_b <= {1'b0 , mut_22};
              end
              else begin
                div_mgc_div_3_a <= else_7_else_1_if_slc_tmp_mut_2;
                div_mgc_div_3_b <= {1'b0 , mut_21};
              end
            end
            else if ( else_7_else_1_else_div_2cyc_st_1 ) begin
              div_mgc_div_2_a <= else_7_else_1_else_slc_tmp_mut_3;
              div_mgc_div_2_b <= {1'b0 , mut_20};
            end
            else begin
              div_mgc_div_1_a <= else_7_else_1_else_slc_tmp_mut_2;
              div_mgc_div_1_b <= {1'b0 , mut_19};
            end
          end
        end
        if_3_slc_svs = 1'b0;
        if_slc_svs = 1'b0;
        else_7_else_1_equal_svs = 1'b0;
        else_5_slc_svs = 1'b0;
        else_1_slc_svs = 1'b0;
        r_1_sva = r_rsc_mgc_in_wire_d;
        g_1_sva = g_rsc_mgc_in_wire_d;
        b_1_sva = b_rsc_mgc_in_wire_d;
        slc_svs = readslicef_12_1_11((({1'b1 , r_1_sva , 1'b1}) + conv_u2u_11_12({(~
            g_1_sva) , 1'b1})));
        if ( slc_svs ) begin
          else_1_slc_svs = readslicef_12_1_11((({1'b1 , g_1_sva , 1'b1}) + conv_u2u_11_12({(~
              b_1_sva) , 1'b1})));
        end
        else begin
          if_slc_svs = readslicef_12_1_11((({1'b1 , r_1_sva , 1'b1}) + conv_u2u_11_12({(~
              b_1_sva) , 1'b1})));
        end
        max_lpi_dfm_3 = MUX1HOT_v_10_3_2({r_1_sva , b_1_sva , g_1_sva}, {(~(if_slc_svs
            | slc_svs)) , ((if_slc_svs & (~ slc_svs)) | (else_1_slc_svs & slc_svs))
            , ((~ else_1_slc_svs) & slc_svs)});
        slc_1_svs = readslicef_12_1_11((({1'b1 , g_1_sva , 1'b1}) + conv_u2u_11_12({(~
            r_1_sva) , 1'b1})));
        if ( slc_1_svs ) begin
          else_5_slc_svs = readslicef_12_1_11((({1'b1 , b_1_sva , 1'b1}) + conv_u2u_11_12({(~
              g_1_sva) , 1'b1})));
        end
        else begin
          if_3_slc_svs = readslicef_12_1_11((({1'b1 , b_1_sva , 1'b1}) + conv_u2u_11_12({(~
              r_1_sva) , 1'b1})));
        end
        min_lpi_dfm_3 = MUX1HOT_v_10_3_2({r_1_sva , b_1_sva , g_1_sva}, {(~(if_3_slc_svs
            | slc_1_svs)) , ((if_3_slc_svs & (~ slc_1_svs)) | (else_5_slc_svs & slc_1_svs))
            , ((~ else_5_slc_svs) & slc_1_svs)});
        v_sg1_sva = readslicef_10_9_1((conv_u2u_9_10(max_lpi_dfm_3[9:1]) + max_lpi_dfm_3));
        equal_svs = max_lpi_dfm_3 == min_lpi_dfm_3;
        if ( equal_svs ) begin
        end
        else begin
          delta_sva = readslicef_11_10_1((({max_lpi_dfm_3 , 1'b1}) + ({(~ min_lpi_dfm_3)
              , 1'b1})));
          unequal_tmp = (max_lpi_dfm_3[9]) | (max_lpi_dfm_3[8]) | (max_lpi_dfm_3[7])
              | (max_lpi_dfm_3[6]) | (max_lpi_dfm_3[5]) | (max_lpi_dfm_3[4]) | (max_lpi_dfm_3[3])
              | (max_lpi_dfm_3[2]) | (max_lpi_dfm_3[1]) | (max_lpi_dfm_3[0]);
          max_lpi_dfm_3_st = max_lpi_dfm_3;
          case (max_lpi_dfm_3)
            10'b0 : begin
              // NOP
            end
            default : begin
              else_7_if_div_2cyc = ~ else_7_if_div_2cyc;
              else_7_if_div_2cyc_st = else_7_if_div_2cyc;
              if ( else_7_if_div_2cyc ) begin
                delta_sva_mut = delta_sva;
                div_mgc_div_6_a <= delta_sva;
                max_lpi_dfm_3_mut = max_lpi_dfm_3;
                div_mgc_div_6_b <= max_lpi_dfm_3;
              end
              else begin
                delta_sva_mut_1 = delta_sva;
                div_mgc_div_7_a <= delta_sva;
                max_lpi_dfm_3_mut_1 = max_lpi_dfm_3;
                div_mgc_div_7_b <= max_lpi_dfm_3;
              end
            end
          endcase
          r_1_lpi_dfm = r_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          g_1_lpi_dfm = g_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          b_1_lpi_dfm = b_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          else_7_equal_svs = r_1_lpi_dfm == max_lpi_dfm_3;
          else_7_equal_svs_st = else_7_equal_svs;
          if ( else_7_equal_svs ) begin
            else_7_if_1_slc_tmp = readslicef_12_11_1((({1'b1 , g_1_lpi_dfm , 1'b1})
                + conv_u2s_11_12({(~ b_1_lpi_dfm) , 1'b1})));
            else_7_if_1_div_2cyc = ~ else_7_if_1_div_2cyc;
            else_7_if_1_div_2cyc_st = else_7_if_1_div_2cyc;
            if ( else_7_if_1_div_2cyc ) begin
              else_7_if_1_slc_tmp_mut = else_7_if_1_slc_tmp;
              div_mgc_div_a <= else_7_if_1_slc_tmp;
              mut_12 = delta_sva;
              div_mgc_div_b <= {1'b0, delta_sva};
            end
            else begin
              else_7_if_1_slc_tmp_mut_1 = else_7_if_1_slc_tmp;
              div_mgc_div_5_a <= else_7_if_1_slc_tmp;
              mut_17 = delta_sva;
              div_mgc_div_5_b <= {1'b0, delta_sva};
            end
          end
          else begin
            else_7_else_1_equal_svs = g_1_lpi_dfm == max_lpi_dfm_3;
            else_7_else_1_equal_svs_st = else_7_else_1_equal_svs;
            if ( else_7_else_1_equal_svs ) begin
              else_7_else_1_if_slc_tmp = readslicef_12_11_1((({1'b1 , b_1_lpi_dfm
                  , 1'b1}) + conv_u2s_11_12({(~ r_1_lpi_dfm) , 1'b1})));
              else_7_else_1_if_div_2cyc = ~ else_7_else_1_if_div_2cyc;
              else_7_else_1_if_div_2cyc_st = else_7_else_1_if_div_2cyc;
              if ( else_7_else_1_if_div_2cyc ) begin
                else_7_else_1_if_slc_tmp_mut_1 = else_7_else_1_if_slc_tmp;
                div_mgc_div_4_a <= else_7_else_1_if_slc_tmp;
                mut_16 = delta_sva;
                div_mgc_div_4_b <= {1'b0, delta_sva};
              end
              else begin
                else_7_else_1_if_slc_tmp_mut = else_7_else_1_if_slc_tmp;
                div_mgc_div_3_a <= else_7_else_1_if_slc_tmp;
                mut_15 = delta_sva;
                div_mgc_div_3_b <= {1'b0, delta_sva};
              end
            end
            else begin
              else_7_else_1_else_slc_tmp = readslicef_12_11_1((({1'b1 , r_1_lpi_dfm
                  , 1'b1}) + conv_u2s_11_12({(~ g_1_lpi_dfm) , 1'b1})));
              else_7_else_1_else_div_2cyc = ~ else_7_else_1_else_div_2cyc;
              else_7_else_1_else_div_2cyc_st = else_7_else_1_else_div_2cyc;
              if ( else_7_else_1_else_div_2cyc ) begin
                else_7_else_1_else_slc_tmp_mut_1 = else_7_else_1_else_slc_tmp;
                div_mgc_div_2_a <= else_7_else_1_else_slc_tmp;
                mut_14 = delta_sva;
                div_mgc_div_2_b <= {1'b0, delta_sva};
              end
              else begin
                else_7_else_1_else_slc_tmp_mut = else_7_else_1_else_slc_tmp;
                div_mgc_div_1_a <= else_7_else_1_else_slc_tmp;
                mut_13 = delta_sva;
                div_mgc_div_1_b <= {1'b0, delta_sva};
              end
            end
          end
        end
        else_7_else_1_equal_svs_2 = else_7_else_1_equal_svs_1;
        else_7_else_1_equal_svs_1 = else_7_else_1_equal_svs;
        equal_svs_2 = equal_svs_1;
        equal_svs_1 = equal_svs;
        unequal_tmp_2 = unequal_tmp_1;
        unequal_tmp_1 = unequal_tmp;
        else_7_equal_svs_2 = else_7_equal_svs_1;
        else_7_equal_svs_1 = else_7_equal_svs;
        else_7_if_1_slc_tmp_mut_2 = else_7_if_1_slc_tmp_mut;
        mut_18 = mut_12;
        else_7_else_1_else_slc_tmp_mut_2 = else_7_else_1_else_slc_tmp_mut;
        mut_19 = mut_13;
        else_7_else_1_else_slc_tmp_mut_3 = else_7_else_1_else_slc_tmp_mut_1;
        mut_20 = mut_14;
        else_7_else_1_if_slc_tmp_mut_2 = else_7_else_1_if_slc_tmp_mut;
        mut_21 = mut_15;
        else_7_else_1_if_slc_tmp_mut_3 = else_7_else_1_if_slc_tmp_mut_1;
        mut_22 = mut_16;
        else_7_if_1_slc_tmp_mut_3 = else_7_if_1_slc_tmp_mut_1;
        mut_23 = mut_17;
        delta_sva_mut_2 = delta_sva_mut;
        max_lpi_dfm_3_mut_2 = max_lpi_dfm_3_mut;
        delta_sva_mut_3 = delta_sva_mut_1;
        max_lpi_dfm_3_mut_3 = max_lpi_dfm_3_mut_1;
        acc_4_itm_2 = acc_4_itm_1;
        acc_4_itm_1 = conv_u2u_8_9(v_sg1_sva[8:1]) + conv_u2u_1_9(v_sg1_sva[0]);
        equal_svs_st_2 = equal_svs_st_1;
        equal_svs_st_1 = equal_svs;
        max_lpi_dfm_3_st_2 = max_lpi_dfm_3_st_1;
        max_lpi_dfm_3_st_1 = max_lpi_dfm_3_st;
        else_7_if_div_2cyc_st_2 = else_7_if_div_2cyc_st_1;
        else_7_if_div_2cyc_st_1 = else_7_if_div_2cyc_st;
        else_7_equal_svs_st_2 = else_7_equal_svs_st_1;
        else_7_equal_svs_st_1 = else_7_equal_svs_st;
        else_7_if_1_div_2cyc_st_2 = else_7_if_1_div_2cyc_st_1;
        else_7_if_1_div_2cyc_st_1 = else_7_if_1_div_2cyc_st;
        else_7_else_1_equal_svs_st_2 = else_7_else_1_equal_svs_st_1;
        else_7_else_1_equal_svs_st_1 = else_7_else_1_equal_svs_st;
        else_7_else_1_if_div_2cyc_st_2 = else_7_else_1_if_div_2cyc_st_1;
        else_7_else_1_if_div_2cyc_st_1 = else_7_else_1_if_div_2cyc_st;
        else_7_else_1_else_div_2cyc_st_2 = else_7_else_1_else_div_2cyc_st_1;
        else_7_else_1_else_div_2cyc_st_1 = else_7_else_1_else_div_2cyc_st;
        main_stage_0_3 = main_stage_0_2;
        main_stage_0_2 = 1'b1;
      end
    end
    mut_23 = 10'b0;
    mut_22 = 10'b0;
    mut_21 = 10'b0;
    mut_20 = 10'b0;
    mut_19 = 10'b0;
    mut_18 = 10'b0;
    mut_17 = 10'b0;
    mut_16 = 10'b0;
    mut_15 = 10'b0;
    mut_14 = 10'b0;
    mut_13 = 10'b0;
    mut_12 = 10'b0;
    main_stage_0_3 = 1'b0;
    main_stage_0_2 = 1'b0;
    else_7_else_1_else_div_2cyc_st_2 = 1'b0;
    else_7_else_1_else_div_2cyc_st_1 = 1'b0;
    else_7_else_1_if_div_2cyc_st_2 = 1'b0;
    else_7_else_1_equal_svs_st_2 = 1'b0;
    else_7_else_1_if_div_2cyc_st_1 = 1'b0;
    else_7_else_1_equal_svs_st_1 = 1'b0;
    else_7_if_1_div_2cyc_st_2 = 1'b0;
    else_7_equal_svs_st_2 = 1'b0;
    else_7_if_1_div_2cyc_st_1 = 1'b0;
    else_7_equal_svs_st_1 = 1'b0;
    else_7_if_div_2cyc_st_2 = 1'b0;
    max_lpi_dfm_3_st_2 = 10'b0;
    equal_svs_st_2 = 1'b0;
    else_7_if_div_2cyc_st_1 = 1'b0;
    max_lpi_dfm_3_st_1 = 10'b0;
    equal_svs_st_1 = 1'b0;
    acc_4_itm_2 = 9'b0;
    acc_4_itm_1 = 9'b0;
    else_7_else_1_else_div_2cyc_st = 1'b0;
    else_7_else_1_if_div_2cyc_st = 1'b0;
    else_7_else_1_equal_svs_st = 1'b0;
    else_7_if_1_div_2cyc_st = 1'b0;
    else_7_equal_svs_st = 1'b0;
    else_7_if_div_2cyc_st = 1'b0;
    max_lpi_dfm_3_st = 10'b0;
    max_lpi_dfm_3_mut_3 = 10'b0;
    delta_sva_mut_3 = 10'b0;
    max_lpi_dfm_3_mut_2 = 10'b0;
    delta_sva_mut_2 = 10'b0;
    else_7_if_1_slc_tmp_mut_3 = 11'b0;
    else_7_else_1_if_slc_tmp_mut_3 = 11'b0;
    else_7_else_1_if_slc_tmp_mut_2 = 11'b0;
    else_7_else_1_else_slc_tmp_mut_3 = 11'b0;
    else_7_else_1_else_slc_tmp_mut_2 = 11'b0;
    else_7_if_1_slc_tmp_mut_2 = 11'b0;
    else_7_equal_svs_2 = 1'b0;
    else_7_equal_svs_1 = 1'b0;
    unequal_tmp_2 = 1'b0;
    unequal_tmp_1 = 1'b0;
    equal_svs_2 = 1'b0;
    equal_svs_1 = 1'b0;
    else_7_else_1_equal_svs_2 = 1'b0;
    else_7_else_1_equal_svs_1 = 1'b0;
    max_lpi_dfm_3_mut_1 = 10'b0;
    delta_sva_mut_1 = 10'b0;
    max_lpi_dfm_3_mut = 10'b0;
    delta_sva_mut = 10'b0;
    else_7_if_1_slc_tmp_mut_1 = 11'b0;
    else_7_else_1_if_slc_tmp_mut_1 = 11'b0;
    else_7_else_1_if_slc_tmp_mut = 11'b0;
    else_7_else_1_else_slc_tmp_mut_1 = 11'b0;
    else_7_else_1_else_slc_tmp_mut = 11'b0;
    else_7_if_1_slc_tmp_mut = 11'b0;
    div_sdt_3_sva_duc = 6'b0;
    else_7_else_1_else_slc_tmp = 11'b0;
    else_7_else_1_else_div_2cyc = 1'b0;
    div_sdt_2_sva_duc = 6'b0;
    else_7_else_1_if_slc_tmp = 11'b0;
    else_7_else_1_if_div_2cyc = 1'b0;
    else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = 6'b0;
    else_7_if_1_slc_tmp = 11'b0;
    else_7_if_1_div_2cyc = 1'b0;
    s_sg1_sva_2_duc = 8'b0;
    else_7_if_div_2cyc = 1'b0;
    else_7_acc_3_psp_sva = 6'b0;
    h_sg2_lpi_dfm_1 = 1'b0;
    h_sg3_lpi_dfm_1 = 1'b0;
    else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = 4'b0;
    else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = 5'b0;
    else_7_else_1_equal_svs = 1'b0;
    else_7_equal_svs = 1'b0;
    s_sg1_lpi_dfm = 8'b0;
    b_1_lpi_dfm = 10'b0;
    g_1_lpi_dfm = 10'b0;
    r_1_lpi_dfm = 10'b0;
    unequal_tmp = 1'b0;
    delta_sva = 10'b0;
    equal_svs = 1'b0;
    v_sg1_sva = 9'b0;
    min_lpi_dfm_3 = 10'b0;
    else_5_slc_svs = 1'b0;
    if_3_slc_svs = 1'b0;
    slc_1_svs = 1'b0;
    max_lpi_dfm_3 = 10'b0;
    else_1_slc_svs = 1'b0;
    if_slc_svs = 1'b0;
    slc_svs = 1'b0;
    b_1_sva = 10'b0;
    g_1_sva = 10'b0;
    r_1_sva = 10'b0;
    div_mgc_div_7_b <= 10'b0;
    div_mgc_div_7_a <= 10'b0;
    div_mgc_div_6_b <= 10'b0;
    div_mgc_div_6_a <= 10'b0;
    div_mgc_div_5_b <= 11'b0;
    div_mgc_div_5_a <= 11'b0;
    div_mgc_div_4_b <= 11'b0;
    div_mgc_div_4_a <= 11'b0;
    div_mgc_div_3_b <= 11'b0;
    div_mgc_div_3_a <= 11'b0;
    div_mgc_div_2_b <= 11'b0;
    div_mgc_div_2_a <= 11'b0;
    div_mgc_div_1_b <= 11'b0;
    div_mgc_div_1_a <= 11'b0;
    div_mgc_div_b <= 11'b0;
    div_mgc_div_a <= 11'b0;
    V_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    S_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    H_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    else_7_if_div_2cyc = 1'b0;
    else_7_if_1_div_2cyc = 1'b0;
    else_7_else_1_if_div_2cyc = 1'b0;
    else_7_else_1_else_div_2cyc = 1'b0;
    main_stage_0_2 = 1'b0;
    main_stage_0_3 = 1'b0;
    div_mgc_div_a <= 11'b0;
    div_mgc_div_b <= 11'b0;
    div_mgc_div_1_a <= 11'b0;
    div_mgc_div_1_b <= 11'b0;
    div_mgc_div_2_a <= 11'b0;
    div_mgc_div_2_b <= 11'b0;
    div_mgc_div_3_a <= 11'b0;
    div_mgc_div_3_b <= 11'b0;
    div_mgc_div_4_a <= 11'b0;
    div_mgc_div_4_b <= 11'b0;
    div_mgc_div_5_a <= 11'b0;
    div_mgc_div_5_b <= 11'b0;
    div_mgc_div_6_a <= 10'b0;
    div_mgc_div_6_b <= 10'b0;
    div_mgc_div_7_a <= 10'b0;
    div_mgc_div_7_b <= 10'b0;
  end


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [2:0] MUX1HOT_v_3_3_2;
    input [8:0] inputs;
    input [2:0] sel;
    reg [2:0] result;
    integer i;
  begin
    result = inputs[0+:3] & {3{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*3+:3] & {3{sel[i]}});
    MUX1HOT_v_3_3_2 = result;
  end
  endfunction


  function [5:0] readslicef_7_6_1;
    input [6:0] vector;
    reg [6:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_7_6_1 = tmp[5:0];
  end
  endfunction


  function [4:0] signext_5_1;
    input [0:0] vector;
  begin
    signext_5_1= {{4{vector[0]}}, vector};
  end
  endfunction


  function [7:0] signext_8_1;
    input [0:0] vector;
  begin
    signext_8_1= {{7{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function [8:0] readslicef_10_9_1;
    input [9:0] vector;
    reg [9:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_10_9_1 = tmp[8:0];
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function  [7:0] conv_s2u_16_8 ;
    input signed [15:0]  vector ;
  begin
    conv_s2u_16_8 = vector[7:0];
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_9_10 ;
    input [8:0]  vector ;
  begin
    conv_u2u_9_10 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_8_9 ;
    input [7:0]  vector ;
  begin
    conv_u2u_8_9 = {1'b0, vector};
  end
  endfunction


  function  [8:0] conv_u2u_1_9 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_9 = {{8{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    HSVRGB
//  Generated from file(s):
//    9) $PROJECT_HOME/RGBHSV.cpp
// ------------------------------------------------------------------


module HSVRGB (
  r_rsc_z, g_rsc_z, b_rsc_z, H_OUT_rsc_z, S_OUT_rsc_z, V_OUT_rsc_z, clk, rst
);
  input [9:0] r_rsc_z;
  input [9:0] g_rsc_z;
  input [9:0] b_rsc_z;
  output [9:0] H_OUT_rsc_z;
  output [9:0] S_OUT_rsc_z;
  output [9:0] V_OUT_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [9:0] r_rsc_mgc_in_wire_d;
  wire [9:0] g_rsc_mgc_in_wire_d;
  wire [9:0] b_rsc_mgc_in_wire_d;
  wire [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  wire [10:0] div_mgc_div_a;
  wire [10:0] div_mgc_div_b;
  wire [10:0] div_mgc_div_z;
  wire [10:0] div_mgc_div_1_a;
  wire [10:0] div_mgc_div_1_b;
  wire [10:0] div_mgc_div_1_z;
  wire [10:0] div_mgc_div_2_a;
  wire [10:0] div_mgc_div_2_b;
  wire [10:0] div_mgc_div_2_z;
  wire [10:0] div_mgc_div_3_a;
  wire [10:0] div_mgc_div_3_b;
  wire [10:0] div_mgc_div_3_z;
  wire [10:0] div_mgc_div_4_a;
  wire [10:0] div_mgc_div_4_b;
  wire [10:0] div_mgc_div_4_z;
  wire [10:0] div_mgc_div_5_a;
  wire [10:0] div_mgc_div_5_b;
  wire [10:0] div_mgc_div_5_z;
  wire [9:0] div_mgc_div_6_a;
  wire [9:0] div_mgc_div_6_b;
  wire [9:0] div_mgc_div_6_z;
  wire [9:0] div_mgc_div_7_a;
  wire [9:0] div_mgc_div_7_b;
  wire [9:0] div_mgc_div_7_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) r_rsc_mgc_in_wire (
      .d(r_rsc_mgc_in_wire_d),
      .z(r_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) g_rsc_mgc_in_wire (
      .d(g_rsc_mgc_in_wire_d),
      .z(g_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(10)) b_rsc_mgc_in_wire (
      .d(b_rsc_mgc_in_wire_d),
      .z(b_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) H_OUT_rsc_mgc_out_stdreg (
      .d(H_OUT_rsc_mgc_out_stdreg_d),
      .z(H_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) S_OUT_rsc_mgc_out_stdreg (
      .d(S_OUT_rsc_mgc_out_stdreg_d),
      .z(S_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(10)) V_OUT_rsc_mgc_out_stdreg (
      .d(V_OUT_rsc_mgc_out_stdreg_d),
      .z(V_OUT_rsc_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div (
      .a(div_mgc_div_a),
      .b(div_mgc_div_b),
      .z(div_mgc_div_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div_1 (
      .a(div_mgc_div_1_a),
      .b(div_mgc_div_1_b),
      .z(div_mgc_div_1_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div_2 (
      .a(div_mgc_div_2_a),
      .b(div_mgc_div_2_b),
      .z(div_mgc_div_2_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div_3 (
      .a(div_mgc_div_3_a),
      .b(div_mgc_div_3_b),
      .z(div_mgc_div_3_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div_4 (
      .a(div_mgc_div_4_a),
      .b(div_mgc_div_4_b),
      .z(div_mgc_div_4_z)
    );
  mgc_div #(.width_a(11),
  .width_b(11),
  .signd(1)) div_mgc_div_5 (
      .a(div_mgc_div_5_a),
      .b(div_mgc_div_5_b),
      .z(div_mgc_div_5_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(0)) div_mgc_div_6 (
      .a(div_mgc_div_6_a),
      .b(div_mgc_div_6_b),
      .z(div_mgc_div_6_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(0)) div_mgc_div_7 (
      .a(div_mgc_div_7_a),
      .b(div_mgc_div_7_b),
      .z(div_mgc_div_7_z)
    );
  HSVRGB_core HSVRGB_core_inst (
      .clk(clk),
      .rst(rst),
      .r_rsc_mgc_in_wire_d(r_rsc_mgc_in_wire_d),
      .g_rsc_mgc_in_wire_d(g_rsc_mgc_in_wire_d),
      .b_rsc_mgc_in_wire_d(b_rsc_mgc_in_wire_d),
      .H_OUT_rsc_mgc_out_stdreg_d(H_OUT_rsc_mgc_out_stdreg_d),
      .S_OUT_rsc_mgc_out_stdreg_d(S_OUT_rsc_mgc_out_stdreg_d),
      .V_OUT_rsc_mgc_out_stdreg_d(V_OUT_rsc_mgc_out_stdreg_d),
      .div_mgc_div_a(div_mgc_div_a),
      .div_mgc_div_b(div_mgc_div_b),
      .div_mgc_div_z(div_mgc_div_z),
      .div_mgc_div_1_a(div_mgc_div_1_a),
      .div_mgc_div_1_b(div_mgc_div_1_b),
      .div_mgc_div_1_z(div_mgc_div_1_z),
      .div_mgc_div_2_a(div_mgc_div_2_a),
      .div_mgc_div_2_b(div_mgc_div_2_b),
      .div_mgc_div_2_z(div_mgc_div_2_z),
      .div_mgc_div_3_a(div_mgc_div_3_a),
      .div_mgc_div_3_b(div_mgc_div_3_b),
      .div_mgc_div_3_z(div_mgc_div_3_z),
      .div_mgc_div_4_a(div_mgc_div_4_a),
      .div_mgc_div_4_b(div_mgc_div_4_b),
      .div_mgc_div_4_z(div_mgc_div_4_z),
      .div_mgc_div_5_a(div_mgc_div_5_a),
      .div_mgc_div_5_b(div_mgc_div_5_b),
      .div_mgc_div_5_z(div_mgc_div_5_z),
      .div_mgc_div_6_a(div_mgc_div_6_a),
      .div_mgc_div_6_b(div_mgc_div_6_b),
      .div_mgc_div_6_z(div_mgc_div_6_z),
      .div_mgc_div_7_a(div_mgc_div_7_a),
      .div_mgc_div_7_b(div_mgc_div_7_b),
      .div_mgc_div_7_z(div_mgc_div_7_z)
    );
endmodule



