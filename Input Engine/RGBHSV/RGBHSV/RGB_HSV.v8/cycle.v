// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-005
//  Generated date: Tue Apr 26 15:37:17 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    RGB_HSV_core
// ------------------------------------------------------------------


module RGB_HSV_core (
  clk, rst, R_IN_rsc_mgc_in_wire_d, G_IN_rsc_mgc_in_wire_d, B_IN_rsc_mgc_in_wire_d,
      H_OUT_rsc_mgc_out_stdreg_d, S_OUT_rsc_mgc_out_stdreg_d, V_OUT_rsc_mgc_out_stdreg_d,
      div_mgc_div_a, div_mgc_div_b, div_mgc_div_z, div_mgc_div_1_a, div_mgc_div_1_b,
      div_mgc_div_1_z
);
  input clk;
  input rst;
  input [9:0] R_IN_rsc_mgc_in_wire_d;
  input [9:0] G_IN_rsc_mgc_in_wire_d;
  input [9:0] B_IN_rsc_mgc_in_wire_d;
  output [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] div_mgc_div_a;
  reg [9:0] div_mgc_div_a;
  output [9:0] div_mgc_div_b;
  reg [9:0] div_mgc_div_b;
  input [9:0] div_mgc_div_z;
  output [9:0] div_mgc_div_1_a;
  reg [9:0] div_mgc_div_1_a;
  output [9:0] div_mgc_div_1_b;
  reg [9:0] div_mgc_div_1_b;
  input [9:0] div_mgc_div_1_z;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [9:0] R_IN_1_sva;
    reg [9:0] G_IN_1_sva;
    reg [9:0] B_IN_1_sva;
    reg if_acc_cse_sg1_sva;
    reg if_else_slc_svs;
    reg if_else_else_slc_svs;
    reg if_if_1_slc_svs;
    reg if_if_1_else_else_slc_svs;
    reg [9:0] max_lpi_dfm_5;
    reg if_if_1_nor_tmp;
    reg if_else_and_tmp;
    reg if_if_1_nor_1_m1c;
    reg if_if_1_if_1_div_2cyc;
    reg [9:0] if_if_1_slc_1_tmp;
    reg [9:0] s_sva_1_duc;
    reg [9:0] if_if_1_slc_1_tmp_mut;
    reg [9:0] max_lpi_dfm_5_mut;
    reg [9:0] if_if_1_slc_1_tmp_mut_1;
    reg [9:0] max_lpi_dfm_5_mut_1;
    reg [9:0] max_lpi_dfm_8;
    reg [9:0] max_lpi_dfm_9;
    reg [9:0] if_if_1_slc_1_tmp_mut_2;
    reg [9:0] max_lpi_dfm_5_mut_2;
    reg [9:0] if_if_1_slc_1_tmp_mut_3;
    reg [9:0] max_lpi_dfm_5_mut_3;
    reg slc_itm;
    reg if_slc_1_itm;
    reg [9:0] max_lpi_dfm_5_st;
    reg if_if_1_if_1_div_2cyc_st;
    reg if_if_1_or_itm;
    reg if_if_1_or_itm_1;
    reg if_if_1_or_itm_2;
    reg if_if_1_or_1_itm;
    reg if_if_1_or_1_itm_1;
    reg if_if_1_or_1_itm_2;
    reg slc_itm_1;
    reg if_slc_1_itm_1;
    reg [9:0] max_lpi_dfm_5_st_1;
    reg if_if_1_if_1_div_2cyc_st_1;
    reg slc_itm_2;
    reg if_slc_1_itm_2;
    reg [9:0] max_lpi_dfm_5_st_2;
    reg if_if_1_if_1_div_2cyc_st_2;
    reg main_stage_0_2;
    reg main_stage_0_3;

    reg[9:0] if_if_1_mux1h_1_nl;
    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk);
            if ( rst )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        div_mgc_div_a <= 10'b0;
        div_mgc_div_b <= 10'b0;
        div_mgc_div_1_a <= 10'b0;
        div_mgc_div_1_b <= 10'b0;
        if ( main_stage_0_3 ) begin
          if ( slc_itm_2 ) begin
            if ( if_slc_1_itm_2 ) begin
              case (max_lpi_dfm_5_st_2)
                10'b0 : begin
                  // NOP
                end
                default : begin
                  if ( if_if_1_if_1_div_2cyc_st_2 ) begin
                    s_sva_1_duc = div_mgc_div_z;
                  end
                  else begin
                    s_sva_1_duc = div_mgc_div_1_z;
                  end
                end
              endcase
              H_OUT_rsc_mgc_out_stdreg_d <= {2'b0 , ({{3{if_if_1_or_itm_2}}, if_if_1_or_itm_2})
                  , 4'b0};
              S_OUT_rsc_mgc_out_stdreg_d <= s_sva_1_duc & ({{9{if_if_1_or_1_itm_2}},
                  if_if_1_or_1_itm_2});
              V_OUT_rsc_mgc_out_stdreg_d <= max_lpi_dfm_9;
            end
          end
        end
        if ( main_stage_0_2 ) begin
          if ( slc_itm_1 ) begin
            if ( if_slc_1_itm_1 ) begin
              case (max_lpi_dfm_5_st_1)
                10'b0 : begin
                  // NOP
                end
                default : begin
                  if ( if_if_1_if_1_div_2cyc_st_1 ) begin
                    div_mgc_div_a <= if_if_1_slc_1_tmp_mut_2;
                    div_mgc_div_b <= max_lpi_dfm_5_mut_2;
                  end
                  else begin
                    div_mgc_div_1_a <= if_if_1_slc_1_tmp_mut_3;
                    div_mgc_div_1_b <= max_lpi_dfm_5_mut_3;
                  end
                end
              endcase
            end
          end
        end
        if_if_1_else_else_slc_svs = 1'b0;
        if_else_else_slc_svs = 1'b0;
        R_IN_1_sva = R_IN_rsc_mgc_in_wire_d;
        G_IN_1_sva = G_IN_rsc_mgc_in_wire_d;
        B_IN_1_sva = B_IN_rsc_mgc_in_wire_d;
        slc_itm = readslicef_12_1_11((({1'b1 , G_IN_1_sva , 1'b1}) + conv_u2u_11_12({(~
            R_IN_1_sva) , 1'b1})));
        if ( slc_itm ) begin
          if_acc_cse_sg1_sva = readslicef_12_1_11((({1'b1 , B_IN_1_sva , 1'b1}) +
              conv_u2u_11_12({(~ R_IN_1_sva) , 1'b1})));
          if ( if_acc_cse_sg1_sva ) begin
          end
          else begin
            if_else_slc_svs = readslicef_12_1_11((({1'b1 , R_IN_1_sva , 1'b1}) +
                conv_u2u_11_12({(~ B_IN_1_sva) , 1'b1})));
            if ( if_else_slc_svs ) begin
            end
            else begin
              if_else_else_slc_svs = readslicef_12_1_11((({1'b1 , B_IN_1_sva , 1'b1})
                  + conv_u2u_11_12({(~ G_IN_1_sva) , 1'b1})));
            end
          end
          if_slc_1_itm = readslicef_12_1_11((({1'b1 , R_IN_1_sva , 1'b1}) + conv_u2u_11_12({(~
              G_IN_1_sva) , 1'b1})));
          if ( if_slc_1_itm ) begin
            if_if_1_slc_svs = readslicef_12_1_11((({1'b1 , R_IN_1_sva , 1'b1}) +
                conv_u2u_11_12({(~ B_IN_1_sva) , 1'b1})));
            if ( if_if_1_slc_svs ) begin
            end
            else if ( if_acc_cse_sg1_sva ) begin
            end
            else begin
              if_if_1_else_else_slc_svs = readslicef_12_1_11((({1'b1 , G_IN_1_sva
                  , 1'b1}) + conv_u2u_11_12({(~ B_IN_1_sva) , 1'b1})));
            end
            if_if_1_nor_tmp = ~(if_if_1_else_else_slc_svs | if_acc_cse_sg1_sva |
                if_if_1_slc_svs);
            if_else_and_tmp = if_else_else_slc_svs & (~ if_else_slc_svs);
            if_if_1_nor_1_m1c = ~(if_acc_cse_sg1_sva | if_if_1_nor_tmp);
            max_lpi_dfm_5 = MUX1HOT_v_10_3_2({B_IN_1_sva , G_IN_1_sva , R_IN_1_sva},
                {(((~ if_else_and_tmp) & if_if_1_nor_1_m1c) | if_if_1_nor_tmp) ,
                (if_else_and_tmp & if_if_1_nor_1_m1c) , (if_acc_cse_sg1_sva & (~
                if_if_1_nor_tmp))});
            max_lpi_dfm_5_st = max_lpi_dfm_5;
            case (max_lpi_dfm_5)
              10'b0 : begin
                // NOP
              end
              default : begin
                if_if_1_mux1h_1_nl = MUX1HOT_v_10_3_2({G_IN_1_sva , B_IN_1_sva ,
                    R_IN_1_sva}, {(~(if_acc_cse_sg1_sva | if_if_1_slc_svs)) , (if_acc_cse_sg1_sva
                    & (~ if_if_1_slc_svs)) , if_if_1_slc_svs});
                if_if_1_slc_1_tmp = readslicef_11_10_1((({max_lpi_dfm_5 , 1'b1})
                    + ({(~ (if_if_1_mux1h_1_nl)) , 1'b1})));
                if_if_1_if_1_div_2cyc = ~ if_if_1_if_1_div_2cyc;
                if_if_1_if_1_div_2cyc_st = if_if_1_if_1_div_2cyc;
                if ( if_if_1_if_1_div_2cyc ) begin
                  if_if_1_slc_1_tmp_mut = if_if_1_slc_1_tmp;
                  div_mgc_div_a <= if_if_1_slc_1_tmp;
                  max_lpi_dfm_5_mut = max_lpi_dfm_5;
                  div_mgc_div_b <= max_lpi_dfm_5;
                end
                else begin
                  if_if_1_slc_1_tmp_mut_1 = if_if_1_slc_1_tmp;
                  div_mgc_div_1_a <= if_if_1_slc_1_tmp;
                  max_lpi_dfm_5_mut_1 = max_lpi_dfm_5;
                  div_mgc_div_1_b <= max_lpi_dfm_5;
                end
              end
            endcase
            if_if_1_or_itm = (max_lpi_dfm_5[9]) | (max_lpi_dfm_5[8]) | (max_lpi_dfm_5[7])
                | (max_lpi_dfm_5[6]) | (max_lpi_dfm_5[5]) | (max_lpi_dfm_5[4]) |
                (max_lpi_dfm_5[3]) | (max_lpi_dfm_5[2]) | (max_lpi_dfm_5[1]) | (max_lpi_dfm_5[0]);
            if_if_1_or_1_itm = if_if_1_or_itm;
          end
        end
        max_lpi_dfm_9 = max_lpi_dfm_8;
        max_lpi_dfm_8 = max_lpi_dfm_5;
        if_if_1_slc_1_tmp_mut_2 = if_if_1_slc_1_tmp_mut;
        max_lpi_dfm_5_mut_2 = max_lpi_dfm_5_mut;
        if_if_1_slc_1_tmp_mut_3 = if_if_1_slc_1_tmp_mut_1;
        max_lpi_dfm_5_mut_3 = max_lpi_dfm_5_mut_1;
        if_if_1_or_itm_2 = if_if_1_or_itm_1;
        if_if_1_or_itm_1 = if_if_1_or_itm;
        if_if_1_or_1_itm_2 = if_if_1_or_1_itm_1;
        if_if_1_or_1_itm_1 = if_if_1_or_1_itm;
        slc_itm_2 = slc_itm_1;
        slc_itm_1 = slc_itm;
        if_slc_1_itm_2 = if_slc_1_itm_1;
        if_slc_1_itm_1 = if_slc_1_itm;
        max_lpi_dfm_5_st_2 = max_lpi_dfm_5_st_1;
        max_lpi_dfm_5_st_1 = max_lpi_dfm_5_st;
        if_if_1_if_1_div_2cyc_st_2 = if_if_1_if_1_div_2cyc_st_1;
        if_if_1_if_1_div_2cyc_st_1 = if_if_1_if_1_div_2cyc_st;
        main_stage_0_3 = main_stage_0_2;
        main_stage_0_2 = 1'b1;
      end
    end
    main_stage_0_3 = 1'b0;
    main_stage_0_2 = 1'b0;
    if_if_1_if_1_div_2cyc_st_2 = 1'b0;
    max_lpi_dfm_5_st_2 = 10'b0;
    if_slc_1_itm_2 = 1'b0;
    slc_itm_2 = 1'b0;
    if_if_1_if_1_div_2cyc_st_1 = 1'b0;
    max_lpi_dfm_5_st_1 = 10'b0;
    if_slc_1_itm_1 = 1'b0;
    slc_itm_1 = 1'b0;
    if_if_1_or_1_itm_2 = 1'b0;
    if_if_1_or_1_itm_1 = 1'b0;
    if_if_1_or_1_itm = 1'b0;
    if_if_1_or_itm_2 = 1'b0;
    if_if_1_or_itm_1 = 1'b0;
    if_if_1_or_itm = 1'b0;
    if_if_1_if_1_div_2cyc_st = 1'b0;
    max_lpi_dfm_5_st = 10'b0;
    if_slc_1_itm = 1'b0;
    slc_itm = 1'b0;
    max_lpi_dfm_5_mut_3 = 10'b0;
    if_if_1_slc_1_tmp_mut_3 = 10'b0;
    max_lpi_dfm_5_mut_2 = 10'b0;
    if_if_1_slc_1_tmp_mut_2 = 10'b0;
    max_lpi_dfm_9 = 10'b0;
    max_lpi_dfm_8 = 10'b0;
    max_lpi_dfm_5_mut_1 = 10'b0;
    if_if_1_slc_1_tmp_mut_1 = 10'b0;
    max_lpi_dfm_5_mut = 10'b0;
    if_if_1_slc_1_tmp_mut = 10'b0;
    s_sva_1_duc = 10'b0;
    if_if_1_slc_1_tmp = 10'b0;
    if_if_1_if_1_div_2cyc = 1'b0;
    if_if_1_nor_1_m1c = 1'b0;
    if_else_and_tmp = 1'b0;
    if_if_1_nor_tmp = 1'b0;
    max_lpi_dfm_5 = 10'b0;
    if_if_1_else_else_slc_svs = 1'b0;
    if_if_1_slc_svs = 1'b0;
    if_else_else_slc_svs = 1'b0;
    if_else_slc_svs = 1'b0;
    if_acc_cse_sg1_sva = 1'b0;
    B_IN_1_sva = 10'b0;
    G_IN_1_sva = 10'b0;
    R_IN_1_sva = 10'b0;
    div_mgc_div_1_b <= 10'b0;
    div_mgc_div_1_a <= 10'b0;
    div_mgc_div_b <= 10'b0;
    div_mgc_div_a <= 10'b0;
    V_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    S_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    H_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    if_if_1_if_1_div_2cyc = 1'b0;
    main_stage_0_2 = 1'b0;
    main_stage_0_3 = 1'b0;
    div_mgc_div_a <= 10'b0;
    div_mgc_div_b <= 10'b0;
    div_mgc_div_1_a <= 10'b0;
    div_mgc_div_1_b <= 10'b0;
  end


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [9:0] MUX1HOT_v_10_3_2;
    input [29:0] inputs;
    input [2:0] sel;
    reg [9:0] result;
    integer i;
  begin
    result = inputs[0+:10] & {10{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*10+:10] & {10{sel[i]}});
    MUX1HOT_v_10_3_2 = result;
  end
  endfunction


  function [9:0] readslicef_11_10_1;
    input [10:0] vector;
    reg [10:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_11_10_1 = tmp[9:0];
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    RGB_HSV
//  Generated from file(s):
//    9) $PROJECT_HOME/RGBHSV.cpp
// ------------------------------------------------------------------


module RGB_HSV (
  R_IN_rsc_z, G_IN_rsc_z, B_IN_rsc_z, H_OUT_rsc_z, S_OUT_rsc_z, V_OUT_rsc_z, clk,
      rst
);
  input [9:0] R_IN_rsc_z;
  input [9:0] G_IN_rsc_z;
  input [9:0] B_IN_rsc_z;
  output [9:0] H_OUT_rsc_z;
  output [9:0] S_OUT_rsc_z;
  output [9:0] V_OUT_rsc_z;
  input clk;
  input rst;


  // Interconnect Declarations
  wire [9:0] R_IN_rsc_mgc_in_wire_d;
  wire [9:0] G_IN_rsc_mgc_in_wire_d;
  wire [9:0] B_IN_rsc_mgc_in_wire_d;
  wire [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] V_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] div_mgc_div_a;
  wire [9:0] div_mgc_div_b;
  wire [9:0] div_mgc_div_z;
  wire [9:0] div_mgc_div_1_a;
  wire [9:0] div_mgc_div_1_b;
  wire [9:0] div_mgc_div_1_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) R_IN_rsc_mgc_in_wire (
      .d(R_IN_rsc_mgc_in_wire_d),
      .z(R_IN_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) G_IN_rsc_mgc_in_wire (
      .d(G_IN_rsc_mgc_in_wire_d),
      .z(G_IN_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(10)) B_IN_rsc_mgc_in_wire (
      .d(B_IN_rsc_mgc_in_wire_d),
      .z(B_IN_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) H_OUT_rsc_mgc_out_stdreg (
      .d(H_OUT_rsc_mgc_out_stdreg_d),
      .z(H_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) S_OUT_rsc_mgc_out_stdreg (
      .d(S_OUT_rsc_mgc_out_stdreg_d),
      .z(S_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(10)) V_OUT_rsc_mgc_out_stdreg (
      .d(V_OUT_rsc_mgc_out_stdreg_d),
      .z(V_OUT_rsc_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(1)) div_mgc_div (
      .a(div_mgc_div_a),
      .b(div_mgc_div_b),
      .z(div_mgc_div_z)
    );
  mgc_div #(.width_a(10),
  .width_b(10),
  .signd(1)) div_mgc_div_1 (
      .a(div_mgc_div_1_a),
      .b(div_mgc_div_1_b),
      .z(div_mgc_div_1_z)
    );
  RGB_HSV_core RGB_HSV_core_inst (
      .clk(clk),
      .rst(rst),
      .R_IN_rsc_mgc_in_wire_d(R_IN_rsc_mgc_in_wire_d),
      .G_IN_rsc_mgc_in_wire_d(G_IN_rsc_mgc_in_wire_d),
      .B_IN_rsc_mgc_in_wire_d(B_IN_rsc_mgc_in_wire_d),
      .H_OUT_rsc_mgc_out_stdreg_d(H_OUT_rsc_mgc_out_stdreg_d),
      .S_OUT_rsc_mgc_out_stdreg_d(S_OUT_rsc_mgc_out_stdreg_d),
      .V_OUT_rsc_mgc_out_stdreg_d(V_OUT_rsc_mgc_out_stdreg_d),
      .div_mgc_div_a(div_mgc_div_a),
      .div_mgc_div_b(div_mgc_div_b),
      .div_mgc_div_z(div_mgc_div_z),
      .div_mgc_div_1_a(div_mgc_div_1_a),
      .div_mgc_div_1_b(div_mgc_div_1_b),
      .div_mgc_div_1_z(div_mgc_div_1_z)
    );
endmodule



