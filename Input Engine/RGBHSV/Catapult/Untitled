////////////////////////////////////////////////////////////////////////////////
//  _____                           _       _    _____      _ _
// |_   _|                         (_)     | |  / ____|    | | |
//   | |  _ __ ___  _ __   ___ _ __ _  __ _| | | |     ___ | | | ___  __ _  ___
//   | | | '_ ` _ \| '_ \ / _ \ '__| |/ _` | | | |    / _ \| | |/ _ \/ _` |/ _ \
//  _| |_| | | | | | |_) |  __/ |  | | (_| | | | |___| (_) | | |  __/ (_| |  __/
// |_____|_| |_| |_| .__/ \___|_|  |_|\__,_|_|  \_____\___/|_|_|\___|\__, |\___|
//                 | |                                                __/ |
//                 |_|                                               |___/
//  _                     _
// | |                   | |
// | |     ___  _ __   __| | ___  _ __
// | |    / _ \| '_ \ / _` |/ _ \| '_ \
// | |___| (_) | | | | (_| | (_) | | | |
// |______\___/|_| |_|\__,_|\___/|_| |_|
//
////////////////////////////////////////////////////////////////////////////////

#include <ac_fixed.h>
#include <iostream>
#pragma hls_design top

void RGB_HSV(ac_int<10, false> R_IN,ac_int<10, false> G_IN,ac_int<10, false> B_IN, ac_int<10, false> H_OUT, ac_int<10, false> S_OUT, c_int<10, false> V_OUT){
        float min, max, delta;
        
        min = MIN(R_IN, G_IN, B_IN);
        max = MAX(R_IN, G_IN, B_IN);
        *v = max;
        
        delta = max - min;
        
        if(max != 0){
                *s = delta/max;
        }
        else{
              
        
        








void mean_vga(ac_int<PIXEL_WL*KERNEL_WIDTH,false> vin[NUM_PIXELS], ac_int<PIXEL_WL,false> vout[NUM_PIXELS])
{
    ac_int<16, true> red, green, blue;





#if 1

    // shifts pixels from KERNEL_WIDTH rows and keeps KERNEL_WIDTH columns (KERNEL_WIDTHxKERNEL_WIDTH pixels stored)
    static shift_class<ac_int<PIXEL_WL*KERNEL_WIDTH,false>, KERNEL_WIDTH> regs;
    int i;
    
    FRAME: for(int p = 0; p < NUM_PIXELS; p++) {
		// init
		red = 0; 
		green = 0; 
		blue = 0;
		
		// shift input data in the filter fifo
		regs << vin[p]; // advance the pointer address by the pixel number (testbench/simulation only)

		ACC1: for(i = 0; i < KERNEL_WIDTH; i++){
		    red = (regs[i].slc<COLOUR_WL>(2*COLOUR_WL));
			green = (regs[i].slc<COLOUR_WL>(COLOUR_WL));
			blue = (regs[i].slc<COLOUR_WL>(0));
		} 
		if((red > 2*blue) && (red > 2*green)){
		    red = 1023;
		    green = 0;
		    blue = 0;
        }
        if((blue > 2*red) && (blue > 2*green)){
            red = 0;
		    green = 0;
		    blue = 1023;
        }
        if((red < 128) && (green < 128) && (blue < 128)){
            red = 0;
		    green = 0;
		    blue = 0;
        }
        if((red > 512) && (green > 512) && (blue > 512)){
            red = 1023;
		    green = 1023;
		    blue = 1023;
        }
    

		// group the RGB components into a single signal
		vout[p] = ((((ac_int<PIXEL_WL, false>)red) << (2*COLOUR_WL)) | (((ac_int<PIXEL_WL, false>)green) << COLOUR_WL) | (ac_int<PIXEL_WL, false>)blue);
   // }
}
     
#else    
// display input  (test only)
    FRAME: for(p = 0; p < NUM_PIXELS; p++) {
        // copy the value of each colour component from the input stream
        red = vin[p].slc<COLOUR_WL>(2*COLOUR_WL);
        green = vin[p].slc<COLOUR_WL>(COLOUR_WL);
        blue = vin[p].slc<COLOUR_WL>(0);

		// combine the 3 color components into 1 signal only
        vout[p] = ((((ac_int<PIXEL_WL, false>)red) << (2*COLOUR_WL)) | (((ac_int<PIXEL_WL, false>)green) << COLOUR_WL) | (ac_int<PIXEL_WL, false>)blue);   
    }
}
#endif
}

// end of file