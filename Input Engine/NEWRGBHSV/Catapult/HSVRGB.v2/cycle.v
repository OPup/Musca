// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2011a.126 Production Release
//  HLS Date:       Wed Aug  8 00:52:07 PDT 2012
// 
//  Generated by:   oh1015@EEWS104A-005
//  Generated date: Wed Apr 27 16:08:04 2016
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    HSVRGB_core
// ------------------------------------------------------------------


module HSVRGB_core (
  clk, arst_n, r_rsc_mgc_in_wire_d, g_rsc_mgc_in_wire_d, b_rsc_mgc_in_wire_d, H_OUT_rsc_mgc_out_stdreg_d,
      S_OUT_rsc_mgc_out_stdreg_d, div_mgc_div_a, div_mgc_div_b, div_mgc_div_z, div_mgc_div_1_a,
      div_mgc_div_1_b, div_mgc_div_1_z, div_mgc_div_2_a, div_mgc_div_2_b, div_mgc_div_2_z,
      div_mgc_div_3_a, div_mgc_div_3_b, div_mgc_div_3_z, div_mgc_div_4_a, div_mgc_div_4_b,
      div_mgc_div_4_z, div_mgc_div_5_a, div_mgc_div_5_b, div_mgc_div_5_z, div_mgc_div_6_a,
      div_mgc_div_6_b, div_mgc_div_6_z, div_mgc_div_7_a, div_mgc_div_7_b, div_mgc_div_7_z,
      div_mgc_div_8_a, div_mgc_div_8_b, div_mgc_div_8_z, div_mgc_div_9_a, div_mgc_div_9_b,
      div_mgc_div_9_z, div_mgc_div_10_a, div_mgc_div_10_b, div_mgc_div_10_z
);
  input clk;
  input arst_n;
  input [9:0] r_rsc_mgc_in_wire_d;
  input [9:0] g_rsc_mgc_in_wire_d;
  input [9:0] b_rsc_mgc_in_wire_d;
  output [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  output [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  reg [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  output [17:0] div_mgc_div_a;
  reg [17:0] div_mgc_div_a;
  output [14:0] div_mgc_div_b;
  reg [14:0] div_mgc_div_b;
  input [17:0] div_mgc_div_z;
  output [17:0] div_mgc_div_1_a;
  reg [17:0] div_mgc_div_1_a;
  output [14:0] div_mgc_div_1_b;
  reg [14:0] div_mgc_div_1_b;
  input [17:0] div_mgc_div_1_z;
  output [17:0] div_mgc_div_2_a;
  reg [17:0] div_mgc_div_2_a;
  output [14:0] div_mgc_div_2_b;
  reg [14:0] div_mgc_div_2_b;
  input [17:0] div_mgc_div_2_z;
  output [17:0] div_mgc_div_3_a;
  reg [17:0] div_mgc_div_3_a;
  output [14:0] div_mgc_div_3_b;
  reg [14:0] div_mgc_div_3_b;
  input [17:0] div_mgc_div_3_z;
  output [17:0] div_mgc_div_4_a;
  reg [17:0] div_mgc_div_4_a;
  output [14:0] div_mgc_div_4_b;
  reg [14:0] div_mgc_div_4_b;
  input [17:0] div_mgc_div_4_z;
  output [17:0] div_mgc_div_5_a;
  reg [17:0] div_mgc_div_5_a;
  output [14:0] div_mgc_div_5_b;
  reg [14:0] div_mgc_div_5_b;
  input [17:0] div_mgc_div_5_z;
  output [17:0] div_mgc_div_6_a;
  reg [17:0] div_mgc_div_6_a;
  output [14:0] div_mgc_div_6_b;
  reg [14:0] div_mgc_div_6_b;
  input [17:0] div_mgc_div_6_z;
  output [17:0] div_mgc_div_7_a;
  reg [17:0] div_mgc_div_7_a;
  output [14:0] div_mgc_div_7_b;
  reg [14:0] div_mgc_div_7_b;
  input [17:0] div_mgc_div_7_z;
  output [17:0] div_mgc_div_8_a;
  reg [17:0] div_mgc_div_8_a;
  output [14:0] div_mgc_div_8_b;
  reg [14:0] div_mgc_div_8_b;
  input [17:0] div_mgc_div_8_z;
  output [13:0] div_mgc_div_9_a;
  reg [13:0] div_mgc_div_9_a;
  output [6:0] div_mgc_div_9_b;
  reg [6:0] div_mgc_div_9_b;
  input [13:0] div_mgc_div_9_z;
  output [13:0] div_mgc_div_10_a;
  reg [13:0] div_mgc_div_10_a;
  output [6:0] div_mgc_div_10_b;
  reg [6:0] div_mgc_div_10_b;
  input [13:0] div_mgc_div_10_z;



  // Interconnect Declarations for Component Instantiations 
  always @(*)
  begin : core
    // Interconnect Declarations
    reg [9:0] r_1_sva;
    reg [9:0] g_1_sva;
    reg [9:0] b_1_sva;
    reg slc_svs;
    reg if_slc_svs;
    reg else_1_slc_svs;
    reg [6:0] max_sg1_lpi_dfm_3;
    reg slc_1_svs;
    reg if_3_slc_svs;
    reg else_5_slc_svs;
    reg [6:0] min_sg1_lpi_dfm_3;
    reg if_7_equal_svs;
    reg [6:0] delta_sg1_sva;
    reg unequal_tmp;
    reg [9:0] r_1_lpi_dfm;
    reg [9:0] g_1_lpi_dfm;
    reg [9:0] b_1_lpi_dfm;
    reg [13:0] s_lpi_dfm;
    reg else_7_and_svs;
    reg else_7_else_1_and_svs;
    reg [3:0] else_7_else_1_if_ac_fixed_cctor_sg2_1_sva;
    reg [2:0] else_7_else_1_else_ac_fixed_cctor_sg2_1_sva;
    reg h_sg2_lpi_dfm_1;
    reg [4:0] else_7_acc_3_psp_sva;
    reg [10:0] mul_rnd_sg1_sva;
    reg else_7_if_div_2cyc;
    reg [13:0] s_sva_2_duc;
    reg [1:0] else_7_if_1_div_3cyc;
    reg [4:0] else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc;
    reg [1:0] else_7_else_1_if_div_3cyc;
    reg [4:0] div_sdt_2_sva_duc;
    reg [1:0] else_7_else_1_else_div_3cyc;
    reg [4:0] div_sdt_3_sva_duc;
    reg [6:0] max_sg1_lpi_dfm_3_mut;
    reg [6:0] max_sg1_lpi_dfm_3_mut_1;
    reg else_7_else_1_and_svs_1;
    reg else_7_else_1_and_svs_2;
    reg else_7_else_1_and_svs_3;
    reg if_7_equal_svs_1;
    reg if_7_equal_svs_2;
    reg if_7_equal_svs_3;
    reg unequal_tmp_1;
    reg unequal_tmp_2;
    reg else_7_and_svs_1;
    reg else_7_and_svs_2;
    reg else_7_and_svs_3;
    reg [6:0] max_sg1_lpi_dfm_3_mut_2;
    reg [6:0] max_sg1_lpi_dfm_3_mut_3;
    reg [6:0] max_sg1_lpi_dfm_3_st;
    reg else_7_if_div_2cyc_st;
    reg else_7_and_svs_st;
    reg [1:0] else_7_if_1_div_3cyc_st;
    reg else_7_else_1_and_svs_st;
    reg [1:0] else_7_else_1_if_div_3cyc_st;
    reg [1:0] else_7_else_1_else_div_3cyc_st;
    reg [9:0] acc_3_itm;
    reg [9:0] acc_3_itm_1;
    reg if_7_equal_svs_st_1;
    reg [6:0] max_sg1_lpi_dfm_3_st_1;
    reg else_7_if_div_2cyc_st_1;
    reg if_7_equal_svs_st_2;
    reg [6:0] max_sg1_lpi_dfm_3_st_2;
    reg else_7_if_div_2cyc_st_2;
    reg else_7_and_svs_st_1;
    reg else_7_and_svs_st_2;
    reg [1:0] else_7_if_1_div_3cyc_st_1;
    reg [1:0] else_7_if_1_div_3cyc_st_2;
    reg if_7_equal_svs_st_3;
    reg else_7_and_svs_st_3;
    reg [1:0] else_7_if_1_div_3cyc_st_3;
    reg else_7_else_1_and_svs_st_1;
    reg else_7_else_1_and_svs_st_2;
    reg [1:0] else_7_else_1_if_div_3cyc_st_1;
    reg [1:0] else_7_else_1_if_div_3cyc_st_2;
    reg else_7_else_1_and_svs_st_3;
    reg [1:0] else_7_else_1_if_div_3cyc_st_3;
    reg [1:0] else_7_else_1_else_div_3cyc_st_1;
    reg [1:0] else_7_else_1_else_div_3cyc_st_2;
    reg [1:0] else_7_else_1_else_div_3cyc_st_3;
    reg main_stage_0_2;
    reg main_stage_0_3;
    reg main_stage_0_4;
    reg [10:0] else_7_if_1_conc_1_tmp_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_1_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_2_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_1_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_2_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_1_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_2_sg1;
    reg [6:0] else_7_if_conc_tmp_mut_sg1;
    reg [6:0] else_7_if_conc_tmp_mut_1_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_3_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_4_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_3_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_4_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_5_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_6_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_7_sg1;
    reg [10:0] else_7_else_1_else_conc_tmp_mut_8_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_3_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_4_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_5_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_6_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_7_sg1;
    reg [10:0] else_7_else_1_if_conc_tmp_mut_8_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_5_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_6_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_7_sg1;
    reg [10:0] else_7_if_1_conc_1_tmp_mut_8_sg1;
    reg [6:0] else_7_if_conc_tmp_mut_2_sg1;
    reg [6:0] else_7_if_conc_tmp_mut_3_sg1;
    reg [1:0] else_7_if_1_acc_idiv;
    reg [1:0] acc_imod;
    reg [1:0] else_7_else_1_if_acc_idiv;
    reg [1:0] acc_imod_1;
    reg [1:0] else_7_else_1_else_acc_idiv;
    reg [1:0] acc_imod_2;
    reg [6:0] mut_sg1_1;
    reg [6:0] mut_1_sg1_1;
    reg [6:0] mut_2_sg1_1;
    reg [6:0] mut_3_sg1_1;
    reg [6:0] mut_4_sg1_1;
    reg [6:0] mut_5_sg1_1;
    reg [6:0] mut_6_sg1_1;
    reg [6:0] mut_7_sg1_1;
    reg [6:0] mut_8_sg1_1;
    reg [6:0] mut_9_sg1_1;
    reg [6:0] mut_10_sg1_1;
    reg [6:0] mut_11_sg1_1;
    reg [6:0] mut_12_sg1_1;
    reg [6:0] mut_13_sg1_1;
    reg [6:0] mut_14_sg1_1;
    reg [6:0] mut_15_sg1_1;
    reg [6:0] mut_16_sg1_1;
    reg [6:0] mut_17_sg1_1;
    reg [6:0] mut_18_sg1_1;
    reg [6:0] mut_19_sg1_1;
    reg [6:0] mut_20_sg1_1;
    reg [6:0] mut_21_sg1_1;
    reg [6:0] mut_22_sg1_1;
    reg [6:0] mut_23_sg1_1;
    reg [6:0] mut_24_sg1_1;
    reg [6:0] mut_25_sg1_1;
    reg [6:0] mut_26_sg1_1;

    reg[0:0] else_7_else_1_mux_2_nl;
    reg[1:0] else_7_mux1h_nl;
    reg[0:0] else_7_mux_4_nl;
    reg[0:0] else_7_else_1_mux_nl;
    reg[0:0] else_7_mux_5_nl;
    reg[0:0] else_7_else_1_mux_1_nl;
    begin : mainExit
      forever begin : main
        // C-Step 0 of Loop 'main'
        begin : waitLoop0Exit
          forever begin : waitLoop0
            @(posedge clk or negedge ( arst_n ));
            if ( ~ arst_n )
              disable mainExit;
            if ( clk )
              disable waitLoop0Exit;
          end
        end
        // C-Step 1 of Loop 'main'
        div_mgc_div_a <= 18'b0;
        div_mgc_div_b <= 15'b0;
        div_mgc_div_1_a <= 18'b0;
        div_mgc_div_1_b <= 15'b0;
        div_mgc_div_2_a <= 18'b0;
        div_mgc_div_2_b <= 15'b0;
        div_mgc_div_3_a <= 18'b0;
        div_mgc_div_3_b <= 15'b0;
        div_mgc_div_4_a <= 18'b0;
        div_mgc_div_4_b <= 15'b0;
        div_mgc_div_5_a <= 18'b0;
        div_mgc_div_5_b <= 15'b0;
        div_mgc_div_6_a <= 18'b0;
        div_mgc_div_6_b <= 15'b0;
        div_mgc_div_7_a <= 18'b0;
        div_mgc_div_7_b <= 15'b0;
        div_mgc_div_8_a <= 18'b0;
        div_mgc_div_8_b <= 15'b0;
        div_mgc_div_9_a <= 14'b0;
        div_mgc_div_9_b <= 7'b0;
        div_mgc_div_10_a <= 14'b0;
        div_mgc_div_10_b <= 7'b0;
        if ( main_stage_0_4 ) begin
          else_7_acc_3_psp_sva = 5'b0;
          else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = 3'b0;
          else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = 4'b0;
          if ( if_7_equal_svs_st_3 ) begin
          end
          else begin
            if ( else_7_and_svs_st_3 ) begin
              case (else_7_if_1_div_3cyc_st_3)
                2'b0 : begin
                  else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = div_mgc_div_7_z[4:0];
                end
                2'b1 : begin
                  else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = div_mgc_div_8_z[4:0];
                end
                2'b10 : begin
                  else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = div_mgc_div_z[4:0];
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else if ( else_7_else_1_and_svs_st_3 ) begin
              case (else_7_else_1_if_div_3cyc_st_3)
                2'b0 : begin
                  div_sdt_2_sva_duc = div_mgc_div_4_z[4:0];
                end
                2'b1 : begin
                  div_sdt_2_sva_duc = div_mgc_div_5_z[4:0];
                end
                2'b10 : begin
                  div_sdt_2_sva_duc = div_mgc_div_6_z[4:0];
                end
                default : begin
                  // NOP
                end
              endcase
              else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = (div_sdt_2_sva_duc[4:1])
                  + 4'b1;
            end
            else begin
              case (else_7_else_1_else_div_3cyc_st_3)
                2'b0 : begin
                  div_sdt_3_sva_duc = div_mgc_div_1_z[4:0];
                end
                2'b1 : begin
                  div_sdt_3_sva_duc = div_mgc_div_2_z[4:0];
                end
                2'b10 : begin
                  div_sdt_3_sva_duc = div_mgc_div_3_z[4:0];
                end
                default : begin
                  // NOP
                end
              endcase
              else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = (div_sdt_3_sva_duc[4:2])
                  + 3'b1;
            end
            else_7_else_1_mux_2_nl = MUX_s_1_2_2({(div_sdt_3_sva_duc[0]) , (div_sdt_2_sva_duc[0])},
                else_7_else_1_and_svs_3);
            h_sg2_lpi_dfm_1 = MUX_s_1_2_2({(else_7_else_1_mux_2_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[0])},
                else_7_and_svs_3);
            else_7_mux1h_nl = MUX1HOT_v_2_3_2({(else_7_else_1_else_ac_fixed_cctor_sg2_1_sva[2:1])
                , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[3:2]) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[4:3])},
                {(~(else_7_else_1_and_svs_3 | else_7_and_svs_3)) , (else_7_else_1_and_svs_3
                & (~ else_7_and_svs_3)) , else_7_and_svs_3});
            else_7_else_1_mux_nl = MUX_s_1_2_2({(else_7_else_1_else_ac_fixed_cctor_sg2_1_sva[0])
                , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[1])}, else_7_else_1_and_svs_3);
            else_7_mux_4_nl = MUX_s_1_2_2({(else_7_else_1_mux_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[2])},
                else_7_and_svs_3);
            else_7_else_1_mux_1_nl = MUX_s_1_2_2({(div_sdt_3_sva_duc[1]) , (else_7_else_1_if_ac_fixed_cctor_sg2_1_sva[0])},
                else_7_else_1_and_svs_3);
            else_7_mux_5_nl = MUX_s_1_2_2({(else_7_else_1_mux_1_nl) , (else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc[1])},
                else_7_and_svs_3);
            else_7_acc_3_psp_sva = readslicef_6_5_1((({(~ (else_7_mux1h_nl)) , (~
                (else_7_mux_4_nl)) , (~ (else_7_mux_5_nl)) , (~ h_sg2_lpi_dfm_1)
                , 1'b1}) + ({h_sg2_lpi_dfm_1 , 5'b1})));
          end
          H_OUT_rsc_mgc_out_stdreg_d <= {3'b0 , ((else_7_acc_3_psp_sva[4:1]) & (signext_4_1(~
              if_7_equal_svs_3))) , ((else_7_acc_3_psp_sva[0]) & (~ if_7_equal_svs_3))
              , 2'b0};
          S_OUT_rsc_mgc_out_stdreg_d <= acc_3_itm_1;
        end
        if ( main_stage_0_3 ) begin
          s_lpi_dfm = 14'b0;
          if ( if_7_equal_svs_st_2 ) begin
          end
          else begin
            case (max_sg1_lpi_dfm_3_st_2)
              7'b0 : begin
                // NOP
              end
              default : begin
                if ( else_7_if_div_2cyc_st_2 ) begin
                  s_sva_2_duc = div_mgc_div_9_z;
                end
                else begin
                  s_sva_2_duc = div_mgc_div_10_z;
                end
              end
            endcase
            s_lpi_dfm = s_sva_2_duc & ({{13{unequal_tmp_2}}, unequal_tmp_2});
            if ( else_7_and_svs_st_2 ) begin
              case (else_7_if_1_div_3cyc_st_2)
                2'b0 : begin
                  div_mgc_div_7_a <= {else_7_if_1_conc_1_tmp_mut_6_sg1 , 7'b0};
                  div_mgc_div_7_b <= {1'b0 , mut_24_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_8_a <= {else_7_if_1_conc_1_tmp_mut_8_sg1 , 7'b0};
                  div_mgc_div_8_b <= {1'b0 , mut_26_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_a <= {else_7_if_1_conc_1_tmp_mut_4_sg1 , 7'b0};
                  div_mgc_div_b <= {1'b0 , mut_10_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else if ( else_7_else_1_and_svs_st_2 ) begin
              case (else_7_else_1_if_div_3cyc_st_2)
                2'b0 : begin
                  div_mgc_div_4_a <= {else_7_else_1_if_conc_tmp_mut_4_sg1 , 7'b0};
                  div_mgc_div_4_b <= {1'b0 , mut_18_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_5_a <= {else_7_else_1_if_conc_tmp_mut_6_sg1 , 7'b0};
                  div_mgc_div_5_b <= {1'b0 , mut_20_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_6_a <= {else_7_else_1_if_conc_tmp_mut_8_sg1 , 7'b0};
                  div_mgc_div_6_b <= {1'b0 , mut_22_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else begin
              case (else_7_else_1_else_div_3cyc_st_2)
                2'b0 : begin
                  div_mgc_div_1_a <= {else_7_else_1_else_conc_tmp_mut_4_sg1 , 7'b0};
                  div_mgc_div_1_b <= {1'b0 , mut_12_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_2_a <= {else_7_else_1_else_conc_tmp_mut_6_sg1 , 7'b0};
                  div_mgc_div_2_b <= {1'b0 , mut_14_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_3_a <= {else_7_else_1_else_conc_tmp_mut_8_sg1 , 7'b0};
                  div_mgc_div_3_b <= {1'b0 , mut_16_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
          end
          mul_rnd_sg1_sva = readslicef_15_11_4(conv_s2u_30_15(conv_u2u_14_15(s_lpi_dfm
              & (signext_14_1(~ if_7_equal_svs_2))) * 15'b11001));
          acc_3_itm = (mul_rnd_sg1_sva[10:1]) + conv_u2u_1_10(mul_rnd_sg1_sva[0]);
        end
        if ( main_stage_0_2 ) begin
          if ( if_7_equal_svs_st_1 ) begin
          end
          else begin
            case (max_sg1_lpi_dfm_3_st_1)
              7'b0 : begin
                // NOP
              end
              default : begin
                if ( else_7_if_div_2cyc_st_1 ) begin
                  div_mgc_div_9_a <= {else_7_if_conc_tmp_mut_2_sg1 , 7'b0};
                  div_mgc_div_9_b <= max_sg1_lpi_dfm_3_mut_2;
                end
                else begin
                  div_mgc_div_10_a <= {else_7_if_conc_tmp_mut_3_sg1 , 7'b0};
                  div_mgc_div_10_b <= max_sg1_lpi_dfm_3_mut_3;
                end
              end
            endcase
            if ( else_7_and_svs_st_1 ) begin
              case (else_7_if_1_div_3cyc_st_1)
                2'b0 : begin
                  div_mgc_div_7_a <= {else_7_if_1_conc_1_tmp_mut_5_sg1 , 7'b0};
                  div_mgc_div_7_b <= {1'b0 , mut_23_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_8_a <= {else_7_if_1_conc_1_tmp_mut_7_sg1 , 7'b0};
                  div_mgc_div_8_b <= {1'b0 , mut_25_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_a <= {else_7_if_1_conc_1_tmp_mut_3_sg1 , 7'b0};
                  div_mgc_div_b <= {1'b0 , mut_9_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else if ( else_7_else_1_and_svs_st_1 ) begin
              case (else_7_else_1_if_div_3cyc_st_1)
                2'b0 : begin
                  div_mgc_div_4_a <= {else_7_else_1_if_conc_tmp_mut_3_sg1 , 7'b0};
                  div_mgc_div_4_b <= {1'b0 , mut_17_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_5_a <= {else_7_else_1_if_conc_tmp_mut_5_sg1 , 7'b0};
                  div_mgc_div_5_b <= {1'b0 , mut_19_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_6_a <= {else_7_else_1_if_conc_tmp_mut_7_sg1 , 7'b0};
                  div_mgc_div_6_b <= {1'b0 , mut_21_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else begin
              case (else_7_else_1_else_div_3cyc_st_1)
                2'b0 : begin
                  div_mgc_div_1_a <= {else_7_else_1_else_conc_tmp_mut_3_sg1 , 7'b0};
                  div_mgc_div_1_b <= {1'b0 , mut_11_sg1_1 , 7'b0};
                end
                2'b1 : begin
                  div_mgc_div_2_a <= {else_7_else_1_else_conc_tmp_mut_5_sg1 , 7'b0};
                  div_mgc_div_2_b <= {1'b0 , mut_13_sg1_1 , 7'b0};
                end
                2'b10 : begin
                  div_mgc_div_3_a <= {else_7_else_1_else_conc_tmp_mut_7_sg1 , 7'b0};
                  div_mgc_div_3_b <= {1'b0 , mut_15_sg1_1 , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
          end
        end
        if_3_slc_svs = 1'b0;
        if_slc_svs = 1'b0;
        else_7_else_1_and_svs = 1'b0;
        else_5_slc_svs = 1'b0;
        else_1_slc_svs = 1'b0;
        r_1_sva = r_rsc_mgc_in_wire_d;
        g_1_sva = g_rsc_mgc_in_wire_d;
        b_1_sva = b_rsc_mgc_in_wire_d;
        slc_svs = readslicef_12_1_11((({1'b1 , r_1_sva , 1'b1}) + conv_u2u_11_12({(~
            g_1_sva) , 1'b1})));
        if ( slc_svs ) begin
          else_1_slc_svs = readslicef_12_1_11((({1'b1 , g_1_sva , 1'b1}) + conv_u2u_11_12({(~
              b_1_sva) , 1'b1})));
        end
        else begin
          if_slc_svs = readslicef_12_1_11((({1'b1 , r_1_sva , 1'b1}) + conv_u2u_11_12({(~
              b_1_sva) , 1'b1})));
        end
        max_sg1_lpi_dfm_3 = MUX1HOT_v_7_4_2({(r_1_sva[6:0]) , (b_1_sva[6:0]) , (g_1_sva[6:0])
            , (b_1_sva[6:0])}, {(~(if_slc_svs | slc_svs)) , (if_slc_svs & (~ slc_svs))
            , ((~ else_1_slc_svs) & slc_svs) , (else_1_slc_svs & slc_svs)});
        slc_1_svs = readslicef_12_1_11((({1'b1 , g_1_sva , 1'b1}) + conv_u2u_11_12({(~
            r_1_sva) , 1'b1})));
        if ( slc_1_svs ) begin
          else_5_slc_svs = readslicef_12_1_11((({1'b1 , b_1_sva , 1'b1}) + conv_u2u_11_12({(~
              g_1_sva) , 1'b1})));
        end
        else begin
          if_3_slc_svs = readslicef_12_1_11((({1'b1 , b_1_sva , 1'b1}) + conv_u2u_11_12({(~
              r_1_sva) , 1'b1})));
        end
        min_sg1_lpi_dfm_3 = MUX1HOT_v_7_4_2({(r_1_sva[6:0]) , (b_1_sva[6:0]) , (g_1_sva[6:0])
            , (b_1_sva[6:0])}, {(~(if_3_slc_svs | slc_1_svs)) , (if_3_slc_svs & (~
            slc_1_svs)) , ((~ else_5_slc_svs) & slc_1_svs) , (else_5_slc_svs & slc_1_svs)});
        if_7_equal_svs = max_sg1_lpi_dfm_3 == min_sg1_lpi_dfm_3;
        if ( if_7_equal_svs ) begin
        end
        else begin
          delta_sg1_sva = readslicef_8_7_1((({max_sg1_lpi_dfm_3 , 1'b1}) + ({(~ min_sg1_lpi_dfm_3)
              , 1'b1})));
          unequal_tmp = (max_sg1_lpi_dfm_3[6]) | (max_sg1_lpi_dfm_3[5]) | (max_sg1_lpi_dfm_3[4])
              | (max_sg1_lpi_dfm_3[3]) | (max_sg1_lpi_dfm_3[2]) | (max_sg1_lpi_dfm_3[1])
              | (max_sg1_lpi_dfm_3[0]);
          max_sg1_lpi_dfm_3_st = max_sg1_lpi_dfm_3;
          case (max_sg1_lpi_dfm_3)
            7'b0 : begin
              // NOP
            end
            default : begin
              else_7_if_div_2cyc = ~ else_7_if_div_2cyc;
              else_7_if_div_2cyc_st = else_7_if_div_2cyc;
              if ( else_7_if_div_2cyc ) begin
                else_7_if_conc_tmp_mut_sg1 = delta_sg1_sva;
                div_mgc_div_9_a <= {delta_sg1_sva , 7'b0};
                max_sg1_lpi_dfm_3_mut = max_sg1_lpi_dfm_3;
                div_mgc_div_9_b <= max_sg1_lpi_dfm_3;
              end
              else begin
                else_7_if_conc_tmp_mut_1_sg1 = delta_sg1_sva;
                div_mgc_div_10_a <= {delta_sg1_sva , 7'b0};
                max_sg1_lpi_dfm_3_mut_1 = max_sg1_lpi_dfm_3;
                div_mgc_div_10_b <= max_sg1_lpi_dfm_3;
              end
            end
          endcase
          r_1_lpi_dfm = r_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          g_1_lpi_dfm = g_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          b_1_lpi_dfm = b_1_sva & ({{9{unequal_tmp}}, unequal_tmp});
          else_7_and_svs = ((r_1_lpi_dfm[6:0]) == max_sg1_lpi_dfm_3) & (~((r_1_lpi_dfm[9])
              | (r_1_lpi_dfm[8]) | (r_1_lpi_dfm[7])));
          else_7_and_svs_st = else_7_and_svs;
          if ( else_7_and_svs ) begin
            else_7_if_1_conc_1_tmp_sg1 = readslicef_12_11_1((({1'b1 , g_1_lpi_dfm
                , 1'b1}) + conv_u2s_11_12({(~ b_1_lpi_dfm) , 1'b1})));
            else_7_if_1_acc_idiv = else_7_if_1_div_3cyc + 2'b1;
            acc_imod = conv_u2s_1_2(else_7_if_1_acc_idiv[0]) + conv_u2s_1_2(~ (else_7_if_1_acc_idiv[1]))
                + 2'b11;
            else_7_if_1_div_3cyc = conv_u2u_1_2(acc_imod[0]) + conv_u2u_1_2(acc_imod[1]);
            else_7_if_1_div_3cyc_st = else_7_if_1_div_3cyc;
            case (else_7_if_1_div_3cyc)
              2'b0 : begin
                else_7_if_1_conc_1_tmp_mut_1_sg1 = else_7_if_1_conc_1_tmp_sg1;
                div_mgc_div_7_a <= {else_7_if_1_conc_1_tmp_sg1 , 7'b0};
                mut_7_sg1_1 = delta_sg1_sva;
                div_mgc_div_7_b <= {1'b0 , delta_sg1_sva , 7'b0};
              end
              2'b1 : begin
                else_7_if_1_conc_1_tmp_mut_2_sg1 = else_7_if_1_conc_1_tmp_sg1;
                div_mgc_div_8_a <= {else_7_if_1_conc_1_tmp_sg1 , 7'b0};
                mut_8_sg1_1 = delta_sg1_sva;
                div_mgc_div_8_b <= {1'b0 , delta_sg1_sva , 7'b0};
              end
              2'b10 : begin
                else_7_if_1_conc_1_tmp_mut_sg1 = else_7_if_1_conc_1_tmp_sg1;
                div_mgc_div_a <= {else_7_if_1_conc_1_tmp_sg1 , 7'b0};
                mut_sg1_1 = delta_sg1_sva;
                div_mgc_div_b <= {1'b0 , delta_sg1_sva , 7'b0};
              end
              default : begin
                // NOP
              end
            endcase
          end
          else begin
            else_7_else_1_and_svs = ((g_1_lpi_dfm[6:0]) == max_sg1_lpi_dfm_3) & (~((g_1_lpi_dfm[9])
                | (g_1_lpi_dfm[8]) | (g_1_lpi_dfm[7])));
            else_7_else_1_and_svs_st = else_7_else_1_and_svs;
            if ( else_7_else_1_and_svs ) begin
              else_7_else_1_if_conc_tmp_sg1 = readslicef_12_11_1((({1'b1 , b_1_lpi_dfm
                  , 1'b1}) + conv_u2s_11_12({(~ r_1_lpi_dfm) , 1'b1})));
              else_7_else_1_if_acc_idiv = else_7_else_1_if_div_3cyc + 2'b1;
              acc_imod_1 = conv_u2s_1_2(else_7_else_1_if_acc_idiv[0]) + conv_u2s_1_2(~
                  (else_7_else_1_if_acc_idiv[1])) + 2'b11;
              else_7_else_1_if_div_3cyc = conv_u2u_1_2(acc_imod_1[0]) + conv_u2u_1_2(acc_imod_1[1]);
              else_7_else_1_if_div_3cyc_st = else_7_else_1_if_div_3cyc;
              case (else_7_else_1_if_div_3cyc)
                2'b0 : begin
                  else_7_else_1_if_conc_tmp_mut_sg1 = else_7_else_1_if_conc_tmp_sg1;
                  div_mgc_div_4_a <= {else_7_else_1_if_conc_tmp_sg1 , 7'b0};
                  mut_4_sg1_1 = delta_sg1_sva;
                  div_mgc_div_4_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                2'b1 : begin
                  else_7_else_1_if_conc_tmp_mut_1_sg1 = else_7_else_1_if_conc_tmp_sg1;
                  div_mgc_div_5_a <= {else_7_else_1_if_conc_tmp_sg1 , 7'b0};
                  mut_5_sg1_1 = delta_sg1_sva;
                  div_mgc_div_5_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                2'b10 : begin
                  else_7_else_1_if_conc_tmp_mut_2_sg1 = else_7_else_1_if_conc_tmp_sg1;
                  div_mgc_div_6_a <= {else_7_else_1_if_conc_tmp_sg1 , 7'b0};
                  mut_6_sg1_1 = delta_sg1_sva;
                  div_mgc_div_6_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
            else begin
              else_7_else_1_else_conc_tmp_sg1 = readslicef_12_11_1((({1'b1 , r_1_lpi_dfm
                  , 1'b1}) + conv_u2s_11_12({(~ g_1_lpi_dfm) , 1'b1})));
              else_7_else_1_else_acc_idiv = else_7_else_1_else_div_3cyc + 2'b1;
              acc_imod_2 = conv_u2s_1_2(else_7_else_1_else_acc_idiv[0]) + conv_u2s_1_2(~
                  (else_7_else_1_else_acc_idiv[1])) + 2'b11;
              else_7_else_1_else_div_3cyc = conv_u2u_1_2(acc_imod_2[0]) + conv_u2u_1_2(acc_imod_2[1]);
              else_7_else_1_else_div_3cyc_st = else_7_else_1_else_div_3cyc;
              case (else_7_else_1_else_div_3cyc)
                2'b0 : begin
                  else_7_else_1_else_conc_tmp_mut_sg1 = else_7_else_1_else_conc_tmp_sg1;
                  div_mgc_div_1_a <= {else_7_else_1_else_conc_tmp_sg1 , 7'b0};
                  mut_1_sg1_1 = delta_sg1_sva;
                  div_mgc_div_1_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                2'b1 : begin
                  else_7_else_1_else_conc_tmp_mut_1_sg1 = else_7_else_1_else_conc_tmp_sg1;
                  div_mgc_div_2_a <= {else_7_else_1_else_conc_tmp_sg1 , 7'b0};
                  mut_2_sg1_1 = delta_sg1_sva;
                  div_mgc_div_2_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                2'b10 : begin
                  else_7_else_1_else_conc_tmp_mut_2_sg1 = else_7_else_1_else_conc_tmp_sg1;
                  div_mgc_div_3_a <= {else_7_else_1_else_conc_tmp_sg1 , 7'b0};
                  mut_3_sg1_1 = delta_sg1_sva;
                  div_mgc_div_3_b <= {1'b0 , delta_sg1_sva , 7'b0};
                end
                default : begin
                  // NOP
                end
              endcase
            end
          end
        end
        else_7_else_1_and_svs_3 = else_7_else_1_and_svs_2;
        else_7_else_1_and_svs_2 = else_7_else_1_and_svs_1;
        else_7_else_1_and_svs_1 = else_7_else_1_and_svs;
        if_7_equal_svs_3 = if_7_equal_svs_2;
        if_7_equal_svs_2 = if_7_equal_svs_1;
        if_7_equal_svs_1 = if_7_equal_svs;
        unequal_tmp_2 = unequal_tmp_1;
        unequal_tmp_1 = unequal_tmp;
        else_7_and_svs_3 = else_7_and_svs_2;
        else_7_and_svs_2 = else_7_and_svs_1;
        else_7_and_svs_1 = else_7_and_svs;
        else_7_if_1_conc_1_tmp_mut_4_sg1 = else_7_if_1_conc_1_tmp_mut_3_sg1;
        else_7_if_1_conc_1_tmp_mut_3_sg1 = else_7_if_1_conc_1_tmp_mut_sg1;
        mut_10_sg1_1 = mut_9_sg1_1;
        mut_9_sg1_1 = mut_sg1_1;
        else_7_else_1_else_conc_tmp_mut_4_sg1 = else_7_else_1_else_conc_tmp_mut_3_sg1;
        else_7_else_1_else_conc_tmp_mut_3_sg1 = else_7_else_1_else_conc_tmp_mut_sg1;
        mut_12_sg1_1 = mut_11_sg1_1;
        mut_11_sg1_1 = mut_1_sg1_1;
        else_7_else_1_else_conc_tmp_mut_6_sg1 = else_7_else_1_else_conc_tmp_mut_5_sg1;
        else_7_else_1_else_conc_tmp_mut_5_sg1 = else_7_else_1_else_conc_tmp_mut_1_sg1;
        mut_14_sg1_1 = mut_13_sg1_1;
        mut_13_sg1_1 = mut_2_sg1_1;
        else_7_else_1_else_conc_tmp_mut_8_sg1 = else_7_else_1_else_conc_tmp_mut_7_sg1;
        else_7_else_1_else_conc_tmp_mut_7_sg1 = else_7_else_1_else_conc_tmp_mut_2_sg1;
        mut_16_sg1_1 = mut_15_sg1_1;
        mut_15_sg1_1 = mut_3_sg1_1;
        else_7_else_1_if_conc_tmp_mut_4_sg1 = else_7_else_1_if_conc_tmp_mut_3_sg1;
        else_7_else_1_if_conc_tmp_mut_3_sg1 = else_7_else_1_if_conc_tmp_mut_sg1;
        mut_18_sg1_1 = mut_17_sg1_1;
        mut_17_sg1_1 = mut_4_sg1_1;
        else_7_else_1_if_conc_tmp_mut_6_sg1 = else_7_else_1_if_conc_tmp_mut_5_sg1;
        else_7_else_1_if_conc_tmp_mut_5_sg1 = else_7_else_1_if_conc_tmp_mut_1_sg1;
        mut_20_sg1_1 = mut_19_sg1_1;
        mut_19_sg1_1 = mut_5_sg1_1;
        else_7_else_1_if_conc_tmp_mut_8_sg1 = else_7_else_1_if_conc_tmp_mut_7_sg1;
        else_7_else_1_if_conc_tmp_mut_7_sg1 = else_7_else_1_if_conc_tmp_mut_2_sg1;
        mut_22_sg1_1 = mut_21_sg1_1;
        mut_21_sg1_1 = mut_6_sg1_1;
        else_7_if_1_conc_1_tmp_mut_6_sg1 = else_7_if_1_conc_1_tmp_mut_5_sg1;
        else_7_if_1_conc_1_tmp_mut_5_sg1 = else_7_if_1_conc_1_tmp_mut_1_sg1;
        mut_24_sg1_1 = mut_23_sg1_1;
        mut_23_sg1_1 = mut_7_sg1_1;
        else_7_if_1_conc_1_tmp_mut_8_sg1 = else_7_if_1_conc_1_tmp_mut_7_sg1;
        else_7_if_1_conc_1_tmp_mut_7_sg1 = else_7_if_1_conc_1_tmp_mut_2_sg1;
        mut_26_sg1_1 = mut_25_sg1_1;
        mut_25_sg1_1 = mut_8_sg1_1;
        else_7_if_conc_tmp_mut_2_sg1 = else_7_if_conc_tmp_mut_sg1;
        max_sg1_lpi_dfm_3_mut_2 = max_sg1_lpi_dfm_3_mut;
        else_7_if_conc_tmp_mut_3_sg1 = else_7_if_conc_tmp_mut_1_sg1;
        max_sg1_lpi_dfm_3_mut_3 = max_sg1_lpi_dfm_3_mut_1;
        acc_3_itm_1 = acc_3_itm;
        if_7_equal_svs_st_3 = if_7_equal_svs_st_2;
        if_7_equal_svs_st_2 = if_7_equal_svs_st_1;
        if_7_equal_svs_st_1 = if_7_equal_svs;
        max_sg1_lpi_dfm_3_st_2 = max_sg1_lpi_dfm_3_st_1;
        max_sg1_lpi_dfm_3_st_1 = max_sg1_lpi_dfm_3_st;
        else_7_if_div_2cyc_st_2 = else_7_if_div_2cyc_st_1;
        else_7_if_div_2cyc_st_1 = else_7_if_div_2cyc_st;
        else_7_and_svs_st_3 = else_7_and_svs_st_2;
        else_7_and_svs_st_2 = else_7_and_svs_st_1;
        else_7_and_svs_st_1 = else_7_and_svs_st;
        else_7_if_1_div_3cyc_st_3 = else_7_if_1_div_3cyc_st_2;
        else_7_if_1_div_3cyc_st_2 = else_7_if_1_div_3cyc_st_1;
        else_7_if_1_div_3cyc_st_1 = else_7_if_1_div_3cyc_st;
        else_7_else_1_and_svs_st_3 = else_7_else_1_and_svs_st_2;
        else_7_else_1_and_svs_st_2 = else_7_else_1_and_svs_st_1;
        else_7_else_1_and_svs_st_1 = else_7_else_1_and_svs_st;
        else_7_else_1_if_div_3cyc_st_3 = else_7_else_1_if_div_3cyc_st_2;
        else_7_else_1_if_div_3cyc_st_2 = else_7_else_1_if_div_3cyc_st_1;
        else_7_else_1_if_div_3cyc_st_1 = else_7_else_1_if_div_3cyc_st;
        else_7_else_1_else_div_3cyc_st_3 = else_7_else_1_else_div_3cyc_st_2;
        else_7_else_1_else_div_3cyc_st_2 = else_7_else_1_else_div_3cyc_st_1;
        else_7_else_1_else_div_3cyc_st_1 = else_7_else_1_else_div_3cyc_st;
        main_stage_0_4 = main_stage_0_3;
        main_stage_0_3 = main_stage_0_2;
        main_stage_0_2 = 1'b1;
      end
    end
    mut_26_sg1_1 = 7'b0;
    mut_25_sg1_1 = 7'b0;
    mut_24_sg1_1 = 7'b0;
    mut_23_sg1_1 = 7'b0;
    mut_22_sg1_1 = 7'b0;
    mut_21_sg1_1 = 7'b0;
    mut_20_sg1_1 = 7'b0;
    mut_19_sg1_1 = 7'b0;
    mut_18_sg1_1 = 7'b0;
    mut_17_sg1_1 = 7'b0;
    mut_16_sg1_1 = 7'b0;
    mut_15_sg1_1 = 7'b0;
    mut_14_sg1_1 = 7'b0;
    mut_13_sg1_1 = 7'b0;
    mut_12_sg1_1 = 7'b0;
    mut_11_sg1_1 = 7'b0;
    mut_10_sg1_1 = 7'b0;
    mut_9_sg1_1 = 7'b0;
    mut_8_sg1_1 = 7'b0;
    mut_7_sg1_1 = 7'b0;
    mut_6_sg1_1 = 7'b0;
    mut_5_sg1_1 = 7'b0;
    mut_4_sg1_1 = 7'b0;
    mut_3_sg1_1 = 7'b0;
    mut_2_sg1_1 = 7'b0;
    mut_1_sg1_1 = 7'b0;
    mut_sg1_1 = 7'b0;
    acc_imod_2 = 2'b0;
    else_7_else_1_else_acc_idiv = 2'b0;
    acc_imod_1 = 2'b0;
    else_7_else_1_if_acc_idiv = 2'b0;
    acc_imod = 2'b0;
    else_7_if_1_acc_idiv = 2'b0;
    else_7_if_conc_tmp_mut_3_sg1 = 7'b0;
    else_7_if_conc_tmp_mut_2_sg1 = 7'b0;
    else_7_if_1_conc_1_tmp_mut_8_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_7_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_6_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_5_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_8_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_7_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_6_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_5_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_4_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_3_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_8_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_7_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_6_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_5_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_4_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_3_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_4_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_3_sg1 = 11'b0;
    else_7_if_conc_tmp_mut_1_sg1 = 7'b0;
    else_7_if_conc_tmp_mut_sg1 = 7'b0;
    else_7_if_1_conc_1_tmp_mut_2_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_1_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_2_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_1_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_mut_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_2_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_1_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_mut_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_mut_sg1 = 11'b0;
    else_7_else_1_else_conc_tmp_sg1 = 11'b0;
    else_7_else_1_if_conc_tmp_sg1 = 11'b0;
    else_7_if_1_conc_1_tmp_sg1 = 11'b0;
    main_stage_0_4 = 1'b0;
    main_stage_0_3 = 1'b0;
    main_stage_0_2 = 1'b0;
    else_7_else_1_else_div_3cyc_st_3 = 2'b0;
    else_7_else_1_else_div_3cyc_st_2 = 2'b0;
    else_7_else_1_else_div_3cyc_st_1 = 2'b0;
    else_7_else_1_if_div_3cyc_st_3 = 2'b0;
    else_7_else_1_and_svs_st_3 = 1'b0;
    else_7_else_1_if_div_3cyc_st_2 = 2'b0;
    else_7_else_1_if_div_3cyc_st_1 = 2'b0;
    else_7_else_1_and_svs_st_2 = 1'b0;
    else_7_else_1_and_svs_st_1 = 1'b0;
    else_7_if_1_div_3cyc_st_3 = 2'b0;
    else_7_and_svs_st_3 = 1'b0;
    if_7_equal_svs_st_3 = 1'b0;
    else_7_if_1_div_3cyc_st_2 = 2'b0;
    else_7_if_1_div_3cyc_st_1 = 2'b0;
    else_7_and_svs_st_2 = 1'b0;
    else_7_and_svs_st_1 = 1'b0;
    else_7_if_div_2cyc_st_2 = 1'b0;
    max_sg1_lpi_dfm_3_st_2 = 7'b0;
    if_7_equal_svs_st_2 = 1'b0;
    else_7_if_div_2cyc_st_1 = 1'b0;
    max_sg1_lpi_dfm_3_st_1 = 7'b0;
    if_7_equal_svs_st_1 = 1'b0;
    acc_3_itm_1 = 10'b0;
    acc_3_itm = 10'b0;
    else_7_else_1_else_div_3cyc_st = 2'b0;
    else_7_else_1_if_div_3cyc_st = 2'b0;
    else_7_else_1_and_svs_st = 1'b0;
    else_7_if_1_div_3cyc_st = 2'b0;
    else_7_and_svs_st = 1'b0;
    else_7_if_div_2cyc_st = 1'b0;
    max_sg1_lpi_dfm_3_st = 7'b0;
    max_sg1_lpi_dfm_3_mut_3 = 7'b0;
    max_sg1_lpi_dfm_3_mut_2 = 7'b0;
    else_7_and_svs_3 = 1'b0;
    else_7_and_svs_2 = 1'b0;
    else_7_and_svs_1 = 1'b0;
    unequal_tmp_2 = 1'b0;
    unequal_tmp_1 = 1'b0;
    if_7_equal_svs_3 = 1'b0;
    if_7_equal_svs_2 = 1'b0;
    if_7_equal_svs_1 = 1'b0;
    else_7_else_1_and_svs_3 = 1'b0;
    else_7_else_1_and_svs_2 = 1'b0;
    else_7_else_1_and_svs_1 = 1'b0;
    max_sg1_lpi_dfm_3_mut_1 = 7'b0;
    max_sg1_lpi_dfm_3_mut = 7'b0;
    div_sdt_3_sva_duc = 5'b0;
    else_7_else_1_else_div_3cyc = 2'b0;
    div_sdt_2_sva_duc = 5'b0;
    else_7_else_1_if_div_3cyc = 2'b0;
    else_7_if_1_ac_fixed_cctor_sg1_1_sva_duc = 5'b0;
    else_7_if_1_div_3cyc = 2'b0;
    s_sva_2_duc = 14'b0;
    else_7_if_div_2cyc = 1'b0;
    mul_rnd_sg1_sva = 11'b0;
    else_7_acc_3_psp_sva = 5'b0;
    h_sg2_lpi_dfm_1 = 1'b0;
    else_7_else_1_else_ac_fixed_cctor_sg2_1_sva = 3'b0;
    else_7_else_1_if_ac_fixed_cctor_sg2_1_sva = 4'b0;
    else_7_else_1_and_svs = 1'b0;
    else_7_and_svs = 1'b0;
    s_lpi_dfm = 14'b0;
    b_1_lpi_dfm = 10'b0;
    g_1_lpi_dfm = 10'b0;
    r_1_lpi_dfm = 10'b0;
    unequal_tmp = 1'b0;
    delta_sg1_sva = 7'b0;
    if_7_equal_svs = 1'b0;
    min_sg1_lpi_dfm_3 = 7'b0;
    else_5_slc_svs = 1'b0;
    if_3_slc_svs = 1'b0;
    slc_1_svs = 1'b0;
    max_sg1_lpi_dfm_3 = 7'b0;
    else_1_slc_svs = 1'b0;
    if_slc_svs = 1'b0;
    slc_svs = 1'b0;
    b_1_sva = 10'b0;
    g_1_sva = 10'b0;
    r_1_sva = 10'b0;
    div_mgc_div_10_b <= 7'b0;
    div_mgc_div_10_a <= 14'b0;
    div_mgc_div_9_b <= 7'b0;
    div_mgc_div_9_a <= 14'b0;
    div_mgc_div_8_b <= 15'b0;
    div_mgc_div_8_a <= 18'b0;
    div_mgc_div_7_b <= 15'b0;
    div_mgc_div_7_a <= 18'b0;
    div_mgc_div_6_b <= 15'b0;
    div_mgc_div_6_a <= 18'b0;
    div_mgc_div_5_b <= 15'b0;
    div_mgc_div_5_a <= 18'b0;
    div_mgc_div_4_b <= 15'b0;
    div_mgc_div_4_a <= 18'b0;
    div_mgc_div_3_b <= 15'b0;
    div_mgc_div_3_a <= 18'b0;
    div_mgc_div_2_b <= 15'b0;
    div_mgc_div_2_a <= 18'b0;
    div_mgc_div_1_b <= 15'b0;
    div_mgc_div_1_a <= 18'b0;
    div_mgc_div_b <= 15'b0;
    div_mgc_div_a <= 18'b0;
    S_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    H_OUT_rsc_mgc_out_stdreg_d <= 10'b0;
    else_7_if_div_2cyc = 1'b0;
    else_7_if_1_div_3cyc = 2'b0;
    else_7_else_1_if_div_3cyc = 2'b0;
    else_7_else_1_else_div_3cyc = 2'b0;
    main_stage_0_2 = 1'b0;
    main_stage_0_3 = 1'b0;
    main_stage_0_4 = 1'b0;
    div_mgc_div_a <= 18'b0;
    div_mgc_div_b <= 15'b0;
    div_mgc_div_1_a <= 18'b0;
    div_mgc_div_1_b <= 15'b0;
    div_mgc_div_2_a <= 18'b0;
    div_mgc_div_2_b <= 15'b0;
    div_mgc_div_3_a <= 18'b0;
    div_mgc_div_3_b <= 15'b0;
    div_mgc_div_4_a <= 18'b0;
    div_mgc_div_4_b <= 15'b0;
    div_mgc_div_5_a <= 18'b0;
    div_mgc_div_5_b <= 15'b0;
    div_mgc_div_6_a <= 18'b0;
    div_mgc_div_6_b <= 15'b0;
    div_mgc_div_7_a <= 18'b0;
    div_mgc_div_7_b <= 15'b0;
    div_mgc_div_8_a <= 18'b0;
    div_mgc_div_8_b <= 15'b0;
    div_mgc_div_9_a <= 14'b0;
    div_mgc_div_9_b <= 7'b0;
    div_mgc_div_10_a <= 14'b0;
    div_mgc_div_10_b <= 7'b0;
  end


  function [0:0] MUX_s_1_2_2;
    input [1:0] inputs;
    input [0:0] sel;
    reg [0:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = inputs[1:1];
      end
      1'b1 : begin
        result = inputs[0:0];
      end
      default : begin
        result = inputs[1:1];
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function [1:0] MUX1HOT_v_2_3_2;
    input [5:0] inputs;
    input [2:0] sel;
    reg [1:0] result;
    integer i;
  begin
    result = inputs[0+:2] & {2{sel[0]}};
    for( i = 1; i < 3; i = i + 1 )
      result = result | (inputs[i*2+:2] & {2{sel[i]}});
    MUX1HOT_v_2_3_2 = result;
  end
  endfunction


  function [4:0] readslicef_6_5_1;
    input [5:0] vector;
    reg [5:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_6_5_1 = tmp[4:0];
  end
  endfunction


  function [3:0] signext_4_1;
    input [0:0] vector;
  begin
    signext_4_1= {{3{vector[0]}}, vector};
  end
  endfunction


  function [10:0] readslicef_15_11_4;
    input [14:0] vector;
    reg [14:0] tmp;
  begin
    tmp = vector >> 4;
    readslicef_15_11_4 = tmp[10:0];
  end
  endfunction


  function [13:0] signext_14_1;
    input [0:0] vector;
  begin
    signext_14_1= {{13{vector[0]}}, vector};
  end
  endfunction


  function [0:0] readslicef_12_1_11;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 11;
    readslicef_12_1_11 = tmp[0:0];
  end
  endfunction


  function [6:0] MUX1HOT_v_7_4_2;
    input [27:0] inputs;
    input [3:0] sel;
    reg [6:0] result;
    integer i;
  begin
    result = inputs[0+:7] & {7{sel[0]}};
    for( i = 1; i < 4; i = i + 1 )
      result = result | (inputs[i*7+:7] & {7{sel[i]}});
    MUX1HOT_v_7_4_2 = result;
  end
  endfunction


  function [6:0] readslicef_8_7_1;
    input [7:0] vector;
    reg [7:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_8_7_1 = tmp[6:0];
  end
  endfunction


  function [10:0] readslicef_12_11_1;
    input [11:0] vector;
    reg [11:0] tmp;
  begin
    tmp = vector >> 1;
    readslicef_12_11_1 = tmp[10:0];
  end
  endfunction


  function  [14:0] conv_s2u_30_15 ;
    input signed [29:0]  vector ;
  begin
    conv_s2u_30_15 = vector[14:0];
  end
  endfunction


  function  [14:0] conv_u2u_14_15 ;
    input [13:0]  vector ;
  begin
    conv_u2u_14_15 = {1'b0, vector};
  end
  endfunction


  function  [9:0] conv_u2u_1_10 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_10 = {{9{1'b0}}, vector};
  end
  endfunction


  function  [11:0] conv_u2u_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2u_11_12 = {1'b0, vector};
  end
  endfunction


  function signed [11:0] conv_u2s_11_12 ;
    input [10:0]  vector ;
  begin
    conv_u2s_11_12 = {1'b0, vector};
  end
  endfunction


  function signed [1:0] conv_u2s_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_2 = {1'b0, vector};
  end
  endfunction


  function  [1:0] conv_u2u_1_2 ;
    input [0:0]  vector ;
  begin
    conv_u2u_1_2 = {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    HSVRGB
//  Generated from file(s):
//    2) $PROJECT_HOME/../RGBHSV/RGBHSV.cpp
// ------------------------------------------------------------------


module HSVRGB (
  r_rsc_z, g_rsc_z, b_rsc_z, H_OUT_rsc_z, S_OUT_rsc_z, V_OUT_rsc_z, clk, arst_n
);
  input [9:0] r_rsc_z;
  input [9:0] g_rsc_z;
  input [9:0] b_rsc_z;
  output [9:0] H_OUT_rsc_z;
  output [9:0] S_OUT_rsc_z;
  output [9:0] V_OUT_rsc_z;
  input clk;
  input arst_n;


  // Interconnect Declarations
  wire [9:0] r_rsc_mgc_in_wire_d;
  wire [9:0] g_rsc_mgc_in_wire_d;
  wire [9:0] b_rsc_mgc_in_wire_d;
  wire [9:0] H_OUT_rsc_mgc_out_stdreg_d;
  wire [9:0] S_OUT_rsc_mgc_out_stdreg_d;
  wire [17:0] div_mgc_div_a;
  wire [14:0] div_mgc_div_b;
  wire [17:0] div_mgc_div_z;
  wire [17:0] div_mgc_div_1_a;
  wire [14:0] div_mgc_div_1_b;
  wire [17:0] div_mgc_div_1_z;
  wire [17:0] div_mgc_div_2_a;
  wire [14:0] div_mgc_div_2_b;
  wire [17:0] div_mgc_div_2_z;
  wire [17:0] div_mgc_div_3_a;
  wire [14:0] div_mgc_div_3_b;
  wire [17:0] div_mgc_div_3_z;
  wire [17:0] div_mgc_div_4_a;
  wire [14:0] div_mgc_div_4_b;
  wire [17:0] div_mgc_div_4_z;
  wire [17:0] div_mgc_div_5_a;
  wire [14:0] div_mgc_div_5_b;
  wire [17:0] div_mgc_div_5_z;
  wire [17:0] div_mgc_div_6_a;
  wire [14:0] div_mgc_div_6_b;
  wire [17:0] div_mgc_div_6_z;
  wire [17:0] div_mgc_div_7_a;
  wire [14:0] div_mgc_div_7_b;
  wire [17:0] div_mgc_div_7_z;
  wire [17:0] div_mgc_div_8_a;
  wire [14:0] div_mgc_div_8_b;
  wire [17:0] div_mgc_div_8_z;
  wire [13:0] div_mgc_div_9_a;
  wire [6:0] div_mgc_div_9_b;
  wire [13:0] div_mgc_div_9_z;
  wire [13:0] div_mgc_div_10_a;
  wire [6:0] div_mgc_div_10_b;
  wire [13:0] div_mgc_div_10_z;


  // Interconnect Declarations for Component Instantiations 
  mgc_in_wire #(.rscid(1),
  .width(10)) r_rsc_mgc_in_wire (
      .d(r_rsc_mgc_in_wire_d),
      .z(r_rsc_z)
    );
  mgc_in_wire #(.rscid(2),
  .width(10)) g_rsc_mgc_in_wire (
      .d(g_rsc_mgc_in_wire_d),
      .z(g_rsc_z)
    );
  mgc_in_wire #(.rscid(3),
  .width(10)) b_rsc_mgc_in_wire (
      .d(b_rsc_mgc_in_wire_d),
      .z(b_rsc_z)
    );
  mgc_out_stdreg #(.rscid(4),
  .width(10)) H_OUT_rsc_mgc_out_stdreg (
      .d(H_OUT_rsc_mgc_out_stdreg_d),
      .z(H_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(5),
  .width(10)) S_OUT_rsc_mgc_out_stdreg (
      .d(S_OUT_rsc_mgc_out_stdreg_d),
      .z(S_OUT_rsc_z)
    );
  mgc_out_stdreg #(.rscid(6),
  .width(10)) V_OUT_rsc_mgc_out_stdreg (
      .d(10'b0),
      .z(V_OUT_rsc_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div (
      .a(div_mgc_div_a),
      .b(div_mgc_div_b),
      .z(div_mgc_div_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_1 (
      .a(div_mgc_div_1_a),
      .b(div_mgc_div_1_b),
      .z(div_mgc_div_1_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_2 (
      .a(div_mgc_div_2_a),
      .b(div_mgc_div_2_b),
      .z(div_mgc_div_2_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_3 (
      .a(div_mgc_div_3_a),
      .b(div_mgc_div_3_b),
      .z(div_mgc_div_3_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_4 (
      .a(div_mgc_div_4_a),
      .b(div_mgc_div_4_b),
      .z(div_mgc_div_4_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_5 (
      .a(div_mgc_div_5_a),
      .b(div_mgc_div_5_b),
      .z(div_mgc_div_5_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_6 (
      .a(div_mgc_div_6_a),
      .b(div_mgc_div_6_b),
      .z(div_mgc_div_6_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_7 (
      .a(div_mgc_div_7_a),
      .b(div_mgc_div_7_b),
      .z(div_mgc_div_7_z)
    );
  mgc_div #(.width_a(18),
  .width_b(15),
  .signd(1)) div_mgc_div_8 (
      .a(div_mgc_div_8_a),
      .b(div_mgc_div_8_b),
      .z(div_mgc_div_8_z)
    );
  mgc_div #(.width_a(14),
  .width_b(7),
  .signd(0)) div_mgc_div_9 (
      .a(div_mgc_div_9_a),
      .b(div_mgc_div_9_b),
      .z(div_mgc_div_9_z)
    );
  mgc_div #(.width_a(14),
  .width_b(7),
  .signd(0)) div_mgc_div_10 (
      .a(div_mgc_div_10_a),
      .b(div_mgc_div_10_b),
      .z(div_mgc_div_10_z)
    );
  HSVRGB_core HSVRGB_core_inst (
      .clk(clk),
      .arst_n(arst_n),
      .r_rsc_mgc_in_wire_d(r_rsc_mgc_in_wire_d),
      .g_rsc_mgc_in_wire_d(g_rsc_mgc_in_wire_d),
      .b_rsc_mgc_in_wire_d(b_rsc_mgc_in_wire_d),
      .H_OUT_rsc_mgc_out_stdreg_d(H_OUT_rsc_mgc_out_stdreg_d),
      .S_OUT_rsc_mgc_out_stdreg_d(S_OUT_rsc_mgc_out_stdreg_d),
      .div_mgc_div_a(div_mgc_div_a),
      .div_mgc_div_b(div_mgc_div_b),
      .div_mgc_div_z(div_mgc_div_z),
      .div_mgc_div_1_a(div_mgc_div_1_a),
      .div_mgc_div_1_b(div_mgc_div_1_b),
      .div_mgc_div_1_z(div_mgc_div_1_z),
      .div_mgc_div_2_a(div_mgc_div_2_a),
      .div_mgc_div_2_b(div_mgc_div_2_b),
      .div_mgc_div_2_z(div_mgc_div_2_z),
      .div_mgc_div_3_a(div_mgc_div_3_a),
      .div_mgc_div_3_b(div_mgc_div_3_b),
      .div_mgc_div_3_z(div_mgc_div_3_z),
      .div_mgc_div_4_a(div_mgc_div_4_a),
      .div_mgc_div_4_b(div_mgc_div_4_b),
      .div_mgc_div_4_z(div_mgc_div_4_z),
      .div_mgc_div_5_a(div_mgc_div_5_a),
      .div_mgc_div_5_b(div_mgc_div_5_b),
      .div_mgc_div_5_z(div_mgc_div_5_z),
      .div_mgc_div_6_a(div_mgc_div_6_a),
      .div_mgc_div_6_b(div_mgc_div_6_b),
      .div_mgc_div_6_z(div_mgc_div_6_z),
      .div_mgc_div_7_a(div_mgc_div_7_a),
      .div_mgc_div_7_b(div_mgc_div_7_b),
      .div_mgc_div_7_z(div_mgc_div_7_z),
      .div_mgc_div_8_a(div_mgc_div_8_a),
      .div_mgc_div_8_b(div_mgc_div_8_b),
      .div_mgc_div_8_z(div_mgc_div_8_z),
      .div_mgc_div_9_a(div_mgc_div_9_a),
      .div_mgc_div_9_b(div_mgc_div_9_b),
      .div_mgc_div_9_z(div_mgc_div_9_z),
      .div_mgc_div_10_a(div_mgc_div_10_a),
      .div_mgc_div_10_b(div_mgc_div_10_b),
      .div_mgc_div_10_z(div_mgc_div_10_z)
    );
endmodule



