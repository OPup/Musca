// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/28/2016 16:38:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TestBench
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TestBench_vlg_sample_tst(
	B_IN,
	clk,
	G_IN,
	R_IN,
	sampler_tx
);
input [9:0] B_IN;
input  clk;
input [9:0] G_IN;
input [9:0] R_IN;
output sampler_tx;

reg sample;
time current_time;
always @(B_IN or clk or G_IN or R_IN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TestBench_vlg_check_tst (
	H_OUT,
	S_OUT,
	V_OUT,
	sampler_rx
);
input [9:0] H_OUT;
input [9:0] S_OUT;
input [9:0] V_OUT;
input sampler_rx;

reg [9:0] H_OUT_expected;
reg [9:0] S_OUT_expected;
reg [9:0] V_OUT_expected;

reg [9:0] H_OUT_prev;
reg [9:0] S_OUT_prev;
reg [9:0] V_OUT_prev;

reg [9:0] H_OUT_expected_prev;
reg [9:0] S_OUT_expected_prev;
reg [9:0] V_OUT_expected_prev;

reg [9:0] last_H_OUT_exp;
reg [9:0] last_S_OUT_exp;
reg [9:0] last_V_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	H_OUT_prev = H_OUT;
	S_OUT_prev = S_OUT;
	V_OUT_prev = V_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	H_OUT_expected_prev = H_OUT_expected;
	S_OUT_expected_prev = S_OUT_expected;
	V_OUT_expected_prev = V_OUT_expected;
end


// expected H_OUT[ 9 ]
initial
begin
	H_OUT_expected[9] = 1'bX;
end 
// expected H_OUT[ 8 ]
initial
begin
	H_OUT_expected[8] = 1'bX;
end 
// expected H_OUT[ 7 ]
initial
begin
	H_OUT_expected[7] = 1'bX;
end 
// expected H_OUT[ 6 ]
initial
begin
	H_OUT_expected[6] = 1'bX;
end 
// expected H_OUT[ 5 ]
initial
begin
	H_OUT_expected[5] = 1'bX;
end 
// expected H_OUT[ 4 ]
initial
begin
	H_OUT_expected[4] = 1'bX;
end 
// expected H_OUT[ 3 ]
initial
begin
	H_OUT_expected[3] = 1'bX;
end 
// expected H_OUT[ 2 ]
initial
begin
	H_OUT_expected[2] = 1'bX;
end 
// expected H_OUT[ 1 ]
initial
begin
	H_OUT_expected[1] = 1'bX;
end 
// expected H_OUT[ 0 ]
initial
begin
	H_OUT_expected[0] = 1'bX;
end 
// expected S_OUT[ 9 ]
initial
begin
	S_OUT_expected[9] = 1'bX;
end 
// expected S_OUT[ 8 ]
initial
begin
	S_OUT_expected[8] = 1'bX;
end 
// expected S_OUT[ 7 ]
initial
begin
	S_OUT_expected[7] = 1'bX;
end 
// expected S_OUT[ 6 ]
initial
begin
	S_OUT_expected[6] = 1'bX;
end 
// expected S_OUT[ 5 ]
initial
begin
	S_OUT_expected[5] = 1'bX;
end 
// expected S_OUT[ 4 ]
initial
begin
	S_OUT_expected[4] = 1'bX;
end 
// expected S_OUT[ 3 ]
initial
begin
	S_OUT_expected[3] = 1'bX;
end 
// expected S_OUT[ 2 ]
initial
begin
	S_OUT_expected[2] = 1'bX;
end 
// expected S_OUT[ 1 ]
initial
begin
	S_OUT_expected[1] = 1'bX;
end 
// expected S_OUT[ 0 ]
initial
begin
	S_OUT_expected[0] = 1'bX;
end 
// expected V_OUT[ 9 ]
initial
begin
	V_OUT_expected[9] = 1'bX;
end 
// expected V_OUT[ 8 ]
initial
begin
	V_OUT_expected[8] = 1'bX;
end 
// expected V_OUT[ 7 ]
initial
begin
	V_OUT_expected[7] = 1'bX;
end 
// expected V_OUT[ 6 ]
initial
begin
	V_OUT_expected[6] = 1'bX;
end 
// expected V_OUT[ 5 ]
initial
begin
	V_OUT_expected[5] = 1'bX;
end 
// expected V_OUT[ 4 ]
initial
begin
	V_OUT_expected[4] = 1'bX;
end 
// expected V_OUT[ 3 ]
initial
begin
	V_OUT_expected[3] = 1'bX;
end 
// expected V_OUT[ 2 ]
initial
begin
	V_OUT_expected[2] = 1'bX;
end 
// expected V_OUT[ 1 ]
initial
begin
	V_OUT_expected[1] = 1'bX;
end 
// expected V_OUT[ 0 ]
initial
begin
	V_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(H_OUT_expected or H_OUT or S_OUT_expected or S_OUT or V_OUT_expected or V_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected H_OUT = %b | expected S_OUT = %b | expected V_OUT = %b | ",H_OUT_expected_prev,S_OUT_expected_prev,V_OUT_expected_prev);
	$display("| real H_OUT = %b | real S_OUT = %b | real V_OUT = %b | ",H_OUT_prev,S_OUT_prev,V_OUT_prev);
`endif
	if (
		( H_OUT_expected_prev[0] !== 1'bx ) && ( H_OUT_prev[0] !== H_OUT_expected_prev[0] )
		&& ((H_OUT_expected_prev[0] !== last_H_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[0] = H_OUT_expected_prev[0];
	end
	if (
		( H_OUT_expected_prev[1] !== 1'bx ) && ( H_OUT_prev[1] !== H_OUT_expected_prev[1] )
		&& ((H_OUT_expected_prev[1] !== last_H_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[1] = H_OUT_expected_prev[1];
	end
	if (
		( H_OUT_expected_prev[2] !== 1'bx ) && ( H_OUT_prev[2] !== H_OUT_expected_prev[2] )
		&& ((H_OUT_expected_prev[2] !== last_H_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[2] = H_OUT_expected_prev[2];
	end
	if (
		( H_OUT_expected_prev[3] !== 1'bx ) && ( H_OUT_prev[3] !== H_OUT_expected_prev[3] )
		&& ((H_OUT_expected_prev[3] !== last_H_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[3] = H_OUT_expected_prev[3];
	end
	if (
		( H_OUT_expected_prev[4] !== 1'bx ) && ( H_OUT_prev[4] !== H_OUT_expected_prev[4] )
		&& ((H_OUT_expected_prev[4] !== last_H_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[4] = H_OUT_expected_prev[4];
	end
	if (
		( H_OUT_expected_prev[5] !== 1'bx ) && ( H_OUT_prev[5] !== H_OUT_expected_prev[5] )
		&& ((H_OUT_expected_prev[5] !== last_H_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[5] = H_OUT_expected_prev[5];
	end
	if (
		( H_OUT_expected_prev[6] !== 1'bx ) && ( H_OUT_prev[6] !== H_OUT_expected_prev[6] )
		&& ((H_OUT_expected_prev[6] !== last_H_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[6] = H_OUT_expected_prev[6];
	end
	if (
		( H_OUT_expected_prev[7] !== 1'bx ) && ( H_OUT_prev[7] !== H_OUT_expected_prev[7] )
		&& ((H_OUT_expected_prev[7] !== last_H_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[7] = H_OUT_expected_prev[7];
	end
	if (
		( H_OUT_expected_prev[8] !== 1'bx ) && ( H_OUT_prev[8] !== H_OUT_expected_prev[8] )
		&& ((H_OUT_expected_prev[8] !== last_H_OUT_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[8] = H_OUT_expected_prev[8];
	end
	if (
		( H_OUT_expected_prev[9] !== 1'bx ) && ( H_OUT_prev[9] !== H_OUT_expected_prev[9] )
		&& ((H_OUT_expected_prev[9] !== last_H_OUT_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_H_OUT_exp[9] = H_OUT_expected_prev[9];
	end
	if (
		( S_OUT_expected_prev[0] !== 1'bx ) && ( S_OUT_prev[0] !== S_OUT_expected_prev[0] )
		&& ((S_OUT_expected_prev[0] !== last_S_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[0] = S_OUT_expected_prev[0];
	end
	if (
		( S_OUT_expected_prev[1] !== 1'bx ) && ( S_OUT_prev[1] !== S_OUT_expected_prev[1] )
		&& ((S_OUT_expected_prev[1] !== last_S_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[1] = S_OUT_expected_prev[1];
	end
	if (
		( S_OUT_expected_prev[2] !== 1'bx ) && ( S_OUT_prev[2] !== S_OUT_expected_prev[2] )
		&& ((S_OUT_expected_prev[2] !== last_S_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[2] = S_OUT_expected_prev[2];
	end
	if (
		( S_OUT_expected_prev[3] !== 1'bx ) && ( S_OUT_prev[3] !== S_OUT_expected_prev[3] )
		&& ((S_OUT_expected_prev[3] !== last_S_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[3] = S_OUT_expected_prev[3];
	end
	if (
		( S_OUT_expected_prev[4] !== 1'bx ) && ( S_OUT_prev[4] !== S_OUT_expected_prev[4] )
		&& ((S_OUT_expected_prev[4] !== last_S_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[4] = S_OUT_expected_prev[4];
	end
	if (
		( S_OUT_expected_prev[5] !== 1'bx ) && ( S_OUT_prev[5] !== S_OUT_expected_prev[5] )
		&& ((S_OUT_expected_prev[5] !== last_S_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[5] = S_OUT_expected_prev[5];
	end
	if (
		( S_OUT_expected_prev[6] !== 1'bx ) && ( S_OUT_prev[6] !== S_OUT_expected_prev[6] )
		&& ((S_OUT_expected_prev[6] !== last_S_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[6] = S_OUT_expected_prev[6];
	end
	if (
		( S_OUT_expected_prev[7] !== 1'bx ) && ( S_OUT_prev[7] !== S_OUT_expected_prev[7] )
		&& ((S_OUT_expected_prev[7] !== last_S_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[7] = S_OUT_expected_prev[7];
	end
	if (
		( S_OUT_expected_prev[8] !== 1'bx ) && ( S_OUT_prev[8] !== S_OUT_expected_prev[8] )
		&& ((S_OUT_expected_prev[8] !== last_S_OUT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[8] = S_OUT_expected_prev[8];
	end
	if (
		( S_OUT_expected_prev[9] !== 1'bx ) && ( S_OUT_prev[9] !== S_OUT_expected_prev[9] )
		&& ((S_OUT_expected_prev[9] !== last_S_OUT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_OUT_expected_prev);
		$display ("     Real value = %b", S_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_OUT_exp[9] = S_OUT_expected_prev[9];
	end
	if (
		( V_OUT_expected_prev[0] !== 1'bx ) && ( V_OUT_prev[0] !== V_OUT_expected_prev[0] )
		&& ((V_OUT_expected_prev[0] !== last_V_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[0] = V_OUT_expected_prev[0];
	end
	if (
		( V_OUT_expected_prev[1] !== 1'bx ) && ( V_OUT_prev[1] !== V_OUT_expected_prev[1] )
		&& ((V_OUT_expected_prev[1] !== last_V_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[1] = V_OUT_expected_prev[1];
	end
	if (
		( V_OUT_expected_prev[2] !== 1'bx ) && ( V_OUT_prev[2] !== V_OUT_expected_prev[2] )
		&& ((V_OUT_expected_prev[2] !== last_V_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[2] = V_OUT_expected_prev[2];
	end
	if (
		( V_OUT_expected_prev[3] !== 1'bx ) && ( V_OUT_prev[3] !== V_OUT_expected_prev[3] )
		&& ((V_OUT_expected_prev[3] !== last_V_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[3] = V_OUT_expected_prev[3];
	end
	if (
		( V_OUT_expected_prev[4] !== 1'bx ) && ( V_OUT_prev[4] !== V_OUT_expected_prev[4] )
		&& ((V_OUT_expected_prev[4] !== last_V_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[4] = V_OUT_expected_prev[4];
	end
	if (
		( V_OUT_expected_prev[5] !== 1'bx ) && ( V_OUT_prev[5] !== V_OUT_expected_prev[5] )
		&& ((V_OUT_expected_prev[5] !== last_V_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[5] = V_OUT_expected_prev[5];
	end
	if (
		( V_OUT_expected_prev[6] !== 1'bx ) && ( V_OUT_prev[6] !== V_OUT_expected_prev[6] )
		&& ((V_OUT_expected_prev[6] !== last_V_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[6] = V_OUT_expected_prev[6];
	end
	if (
		( V_OUT_expected_prev[7] !== 1'bx ) && ( V_OUT_prev[7] !== V_OUT_expected_prev[7] )
		&& ((V_OUT_expected_prev[7] !== last_V_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[7] = V_OUT_expected_prev[7];
	end
	if (
		( V_OUT_expected_prev[8] !== 1'bx ) && ( V_OUT_prev[8] !== V_OUT_expected_prev[8] )
		&& ((V_OUT_expected_prev[8] !== last_V_OUT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[8] = V_OUT_expected_prev[8];
	end
	if (
		( V_OUT_expected_prev[9] !== 1'bx ) && ( V_OUT_prev[9] !== V_OUT_expected_prev[9] )
		&& ((V_OUT_expected_prev[9] !== last_V_OUT_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port V_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", V_OUT_expected_prev);
		$display ("     Real value = %b", V_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_V_OUT_exp[9] = V_OUT_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TestBench_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] B_IN;
reg clk;
reg [9:0] G_IN;
reg [9:0] R_IN;
// wires                                               
wire [9:0] H_OUT;
wire [9:0] S_OUT;
wire [9:0] V_OUT;

wire sampler;                             

// assign statements (if any)                          
TestBench i1 (
// port map - connection between master ports and signals/registers   
	.B_IN(B_IN),
	.clk(clk),
	.G_IN(G_IN),
	.H_OUT(H_OUT),
	.R_IN(R_IN),
	.S_OUT(S_OUT),
	.V_OUT(V_OUT)
);
// B_IN[ 9 ]
initial
begin
	B_IN[9] = 1'b0;
end 
// B_IN[ 8 ]
initial
begin
	B_IN[8] = 1'b0;
end 
// B_IN[ 7 ]
initial
begin
	B_IN[7] = 1'b0;
end 
// B_IN[ 6 ]
initial
begin
	B_IN[6] = 1'b0;
end 
// B_IN[ 5 ]
initial
begin
	B_IN[5] = 1'b0;
end 
// B_IN[ 4 ]
initial
begin
	B_IN[4] = 1'b0;
end 
// B_IN[ 3 ]
initial
begin
	B_IN[3] = 1'b0;
end 
// B_IN[ 2 ]
initial
begin
	B_IN[2] = 1'b0;
end 
// B_IN[ 1 ]
initial
begin
	B_IN[1] = 1'b0;
end 
// B_IN[ 0 ]
initial
begin
	B_IN[0] = 1'b0;
end 
// G_IN[ 9 ]
initial
begin
	G_IN[9] = 1'b0;
end 
// G_IN[ 8 ]
initial
begin
	G_IN[8] = 1'b0;
end 
// G_IN[ 7 ]
initial
begin
	G_IN[7] = 1'b0;
end 
// G_IN[ 6 ]
initial
begin
	G_IN[6] = 1'b0;
end 
// G_IN[ 5 ]
initial
begin
	G_IN[5] = 1'b0;
end 
// G_IN[ 4 ]
initial
begin
	G_IN[4] = 1'b0;
end 
// G_IN[ 3 ]
initial
begin
	G_IN[3] = 1'b0;
end 
// G_IN[ 2 ]
initial
begin
	G_IN[2] = 1'b0;
end 
// G_IN[ 1 ]
initial
begin
	G_IN[1] = 1'b0;
end 
// G_IN[ 0 ]
initial
begin
	G_IN[0] = 1'b0;
end 
// R_IN[ 9 ]
initial
begin
	R_IN[9] = 1'b1;
end 
// R_IN[ 8 ]
initial
begin
	R_IN[8] = 1'b1;
end 
// R_IN[ 7 ]
initial
begin
	R_IN[7] = 1'b1;
end 
// R_IN[ 6 ]
initial
begin
	R_IN[6] = 1'b1;
end 
// R_IN[ 5 ]
initial
begin
	R_IN[5] = 1'b1;
end 
// R_IN[ 4 ]
initial
begin
	R_IN[4] = 1'b1;
end 
// R_IN[ 3 ]
initial
begin
	R_IN[3] = 1'b1;
end 
// R_IN[ 2 ]
initial
begin
	R_IN[2] = 1'b1;
end 
// R_IN[ 1 ]
initial
begin
	R_IN[1] = 1'b1;
end 
// R_IN[ 0 ]
initial
begin
	R_IN[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

TestBench_vlg_sample_tst tb_sample (
	.B_IN(B_IN),
	.clk(clk),
	.G_IN(G_IN),
	.R_IN(R_IN),
	.sampler_tx(sampler)
);

TestBench_vlg_check_tst tb_out(
	.H_OUT(H_OUT),
	.S_OUT(S_OUT),
	.V_OUT(V_OUT),
	.sampler_rx(sampler)
);
endmodule

